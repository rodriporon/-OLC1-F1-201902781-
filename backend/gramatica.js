/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,23],$V1=[1,4],$V2=[1,5],$V3=[1,7],$V4=[1,6],$V5=[1,8],$V6=[1,9],$V7=[1,10],$V8=[1,11],$V9=[1,16],$Va=[1,17],$Vb=[1,18],$Vc=[1,12],$Vd=[1,13],$Ve=[1,15],$Vf=[1,19],$Vg=[1,20],$Vh=[1,21],$Vi=[1,29],$Vj=[1,24],$Vk=[1,25],$Vl=[1,26],$Vm=[1,27],$Vn=[1,28],$Vo=[2,5,7,8,9,10,14,19,20,22,23,24,26,27,29,31,33,39,40,46,48,50,51,52,53,54],$Vp=[1,42],$Vq=[1,48],$Vr=[1,40],$Vs=[1,41],$Vt=[1,52],$Vu=[1,55],$Vv=[1,49],$Vw=[1,43],$Vx=[1,44],$Vy=[1,45],$Vz=[1,46],$VA=[1,47],$VB=[1,50],$VC=[1,51],$VD=[1,53],$VE=[1,54],$VF=[1,38],$VG=[24,34],$VH=[12,13,16],$VI=[12,13,16,73,74,75],$VJ=[2,107],$VK=[1,95],$VL=[1,96],$VM=[1,90],$VN=[1,91],$VO=[1,92],$VP=[1,93],$VQ=[1,94],$VR=[1,84],$VS=[1,85],$VT=[1,86],$VU=[1,87],$VV=[1,88],$VW=[1,89],$VX=[12,13,16,18,26,27,35,45,57,58,59,60,61,73,74,75,77,78,79,80,81,82],$VY=[2,43],$VZ=[12,13,16,18,35,45,57,58,59,60,61,73,74,75,77,78,79,80,81,82],$V_=[16,73,74,75],$V$=[1,185],$V01=[1,186],$V11=[1,187],$V21=[1,188],$V31=[1,189],$V41=[1,190],$V51=[12,13,16,18,35,45,57,58,73,74,75,77,78,79,80,81,82],$V61=[12,45],$V71=[1,211],$V81=[12,35,45],$V91=[1,241],$Va1=[1,242],$Vb1=[13,18],$Vc1=[8,84,85],$Vd1=[1,339],$Ve1=[2,7,9,10,14,19,20,22,23,24,26,27,29,31,33,39,40,46,48,50,51,52,53,54],$Vf1=[2,117],$Vg1=[2,116];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"init":3,"instrucciones":4,"EOF":5,"instruccion":6,"LLAVEABRE":7,"LLAVECIERRA":8,"PRINTLN":9,"PARENTESISABRE":10,"operacionNumerica":11,"PARENTESISCIERRA":12,"PUNTOCOMA":13,"PRINT":14,"expresionLogica":15,"INTERROGACIONCIERRA":16,"instruccionTernaria":17,"DOSPUNTOS":18,"WHILE":19,"SWITCH":20,"cases":21,"DO":22,"FOR":23,"IDENTIFICADOR":24,"IGUAL":25,"INCREMENTO":26,"DECREMENTO":27,"tipo_dato":28,"VOID":29,"listaParametros":30,"CALL":31,"listaOperacionNumerica":32,"CONST":33,"CORCHETEABRE":34,"CORCHETECIERRA":35,"NEW":36,"listaArrays":37,"TOCHARARRAY":38,"BREAK":39,"CONTINUE":40,"PUNTO":41,"PUSH":42,"POP":43,"SPLICE":44,"COMA":45,"GRAFICAR_TS":46,"instruccionIf":47,"IF":48,"ELSE":49,"INT":50,"DOUBLE":51,"CHAR":52,"BOOLEAN":53,"STRING":54,"asignacionOperacion":55,"CADENA":56,"MAS":57,"MENOS":58,"MODULO":59,"MULTIPLICADO":60,"DIVIDIDO":61,"TYPEOF":62,"TOLOWER":63,"TOUPPER":64,"LENGTH":65,"ROUND":66,"INDEXOF":67,"ENTERO":68,"DECIMAL":69,"TRUE":70,"FALSE":71,"expresionRelacional":72,"AND":73,"OR":74,"XOR":75,"NOT":76,"MAYOR":77,"MENOR":78,"MAYORIGUAL":79,"MENORIGUAL":80,"DOBLEIGUAL":81,"DIFERENTE":82,"case":83,"CASE":84,"DEFAULT":85,"parametro":86,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"LLAVEABRE",8:"LLAVECIERRA",9:"PRINTLN",10:"PARENTESISABRE",12:"PARENTESISCIERRA",13:"PUNTOCOMA",14:"PRINT",16:"INTERROGACIONCIERRA",18:"DOSPUNTOS",19:"WHILE",20:"SWITCH",22:"DO",23:"FOR",24:"IDENTIFICADOR",25:"IGUAL",26:"INCREMENTO",27:"DECREMENTO",29:"VOID",31:"CALL",33:"CONST",34:"CORCHETEABRE",35:"CORCHETECIERRA",36:"NEW",38:"TOCHARARRAY",39:"BREAK",40:"CONTINUE",41:"PUNTO",42:"PUSH",43:"POP",44:"SPLICE",45:"COMA",46:"GRAFICAR_TS",48:"IF",49:"ELSE",50:"INT",51:"DOUBLE",52:"CHAR",53:"BOOLEAN",54:"STRING",56:"CADENA",57:"MAS",58:"MENOS",59:"MODULO",60:"MULTIPLICADO",61:"DIVIDIDO",62:"TYPEOF",63:"TOLOWER",64:"TOUPPER",65:"LENGTH",66:"ROUND",67:"INDEXOF",68:"ENTERO",69:"DECIMAL",70:"TRUE",71:"FALSE",73:"AND",74:"OR",75:"XOR",76:"NOT",77:"MAYOR",78:"MENOR",79:"MAYORIGUAL",80:"MENORIGUAL",81:"DOBLEIGUAL",82:"DIFERENTE",84:"CASE",85:"DEFAULT"},
productions_: [0,[3,2],[4,2],[4,1],[6,3],[6,5],[6,5],[6,8],[6,7],[6,7],[6,9],[6,14],[6,14],[6,15],[6,16],[6,15],[6,15],[6,7],[6,8],[6,5],[6,6],[6,9],[6,10],[6,8],[6,5],[6,6],[6,11],[6,12],[6,16],[6,17],[6,11],[6,12],[6,9],[6,10],[6,10],[6,11],[6,7],[6,10],[6,4],[6,3],[6,3],[6,3],[6,3],[6,2],[6,2],[6,7],[6,6],[6,9],[6,4],[6,1],[6,2],[6,2],[17,4],[17,4],[17,3],[17,2],[17,2],[17,2],[17,2],[17,5],[47,7],[47,11],[47,9],[28,1],[28,1],[28,1],[28,1],[28,1],[55,1],[55,1],[37,5],[37,3],[32,3],[32,1],[11,3],[11,3],[11,3],[11,3],[11,4],[11,3],[11,2],[11,2],[11,2],[11,2],[11,3],[11,4],[11,4],[11,4],[11,4],[11,4],[11,7],[11,4],[11,6],[11,6],[11,2],[11,1],[11,1],[11,1],[11,1],[11,1],[11,1],[11,1],[15,3],[15,3],[15,3],[15,2],[15,1],[72,1],[72,3],[72,3],[72,3],[72,3],[72,3],[72,3],[21,2],[21,1],[83,6],[83,5],[30,3],[30,1],[86,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

                return $$[$0-1]
        
break;
case 2: case 114:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 3:
 this.$ = [$$[$0]] 
break;
case 4:
 this.$ = instrucciones.nuevoBloque($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 5:
 this.$ = instrucciones.nuevoPrintln($$[$0-2], _$[$0-4].first_line, _$[$0-4].first_column) 
break;
case 6:
 this.$ = instrucciones.nuevoPrint($$[$0-2], _$[$0-4].first_line, _$[$0-4].first_column) 
break;
case 7:
 this.$ = instrucciones.nuevoTernaria($$[$0-6], [$$[$0-3]], [$$[$0-1]], _$[$0-7].first_line, _$[$0-7].first_column)
break;
case 8:
 this.$ = instrucciones.nuevoWhile($$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column)
break;
case 9:
 this.$ = instrucciones.nuevoSwitch($$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column) 
break;
case 10:
 this.$ = instrucciones.nuevoDoWhile($$[$0-6], $$[$0-2], _$[$0-8].first_line, _$[$0-8].first_column)
break;
case 11:
 this.$ = instrucciones.nuevoForAsignacionSimbolosMas($$[$0-11], $$[$0-9], $$[$0-7], $$[$0-5], $$[$0-1], _$[$0-13].first_line, _$[$0-13].first_column) 
break;
case 12:
 this.$ = instrucciones.nuevoForAsignacionSimbolosMenos($$[$0-11], $$[$0-9], $$[$0-7], $$[$0-5], $$[$0-1], _$[$0-13].first_line, _$[$0-13].first_column) 
break;
case 13:
 this.$ = instrucciones.nuevoForAsignacionOperacion($$[$0-12], $$[$0-10], $$[$0-8], $$[$0-6], $$[$0-4], $$[$0-1], _$[$0-14].first_line, _$[$0-14].first_column) 
break;
case 14:
 this.$ = instrucciones.nuevoForDeclaracionOperacion($$[$0-13].toUpperCase(), $$[$0-12], $$[$0-10], $$[$0-8], $$[$0-6], $$[$0-4], $$[$0-1], _$[$0-15].first_line, _$[$0-15].first_column) 
break;
case 15:
 this.$ = instrucciones.nuevoForDeclaracionSimbolosMas($$[$0-12].toUpperCase(), $$[$0-11], $$[$0-9], $$[$0-7], $$[$0-5], $$[$0-1], _$[$0-14].first_line, _$[$0-14].first_column) 
break;
case 16:
 this.$ = instrucciones.nuevoForDeclaracionSimbolosMenos($$[$0-12].toUpperCase(), $$[$0-11], $$[$0-9], $$[$0-7], $$[$0-5], $$[$0-1], _$[$0-14].first_line, _$[$0-14].first_column) 
break;
case 17:
 this.$ = instrucciones.nuevoMetodoSinParametros($$[$0-5], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column) 
break;
case 18:
 this.$ = instrucciones.nuevoMetodoConParametros($$[$0-6], $$[$0-4], $$[$0-1], _$[$0-7].first_line, _$[$0-7].first_column) 
break;
case 19: case 59:
 this.$ = instrucciones.nuevoCallMetodoSinParametros($$[$0-3], _$[$0-4].first_line, _$[$0-4].first_column) 
break;
case 20:
 this.$ = instrucciones.nuevoCallMetodoConParametros($$[$0-4], $$[$0-2], _$[$0-5].first_line, _$[$0-5].first_column) 
break;
case 21:
 this.$ = instrucciones.nuevoTernariaDeclaracion($$[$0-8].toUpperCase(), $$[$0-7], $$[$0-5], [$$[$0-3]], [$$[$0-1]], false, _$[$0-8].first_line, _$[$0-8].first_column)
break;
case 22:
 this.$ = instrucciones.nuevoTernariaDeclaracion($$[$0-8].toUpperCase(), $$[$0-7], $$[$0-5], [$$[$0-3]], [$$[$0-1]], true, _$[$0-9].first_line, _$[$0-9].first_column)
break;
case 23:
 this.$ = instrucciones.nuevoTernariaAsignacion($$[$0-7], $$[$0-5], [$$[$0-3]], [$$[$0-1]], _$[$0-7].first_line, _$[$0-7].first_column)
break;
case 24:
 this.$ = instrucciones.nuevoDeclaracionAsignacion($$[$0-4].toUpperCase(), $$[$0-3], $$[$0-1], false, _$[$0-4].first_line, _$[$0-4].first_column)
break;
case 25:
 this.$ = instrucciones.nuevoDeclaracionAsignacion($$[$0-4].toUpperCase(), $$[$0-3], $$[$0-1], true, _$[$0-5].first_line, _$[$0-5].first_column)
break;
case 26:
 this.$ = instrucciones.nuevoArray($$[$0-10].toUpperCase(), $$[$0-9], $$[$0-4].toUpperCase(), $$[$0-2], false, _$[$0-10].first_line, _$[$0-10].first_column) 
break;
case 27:
 this.$ = instrucciones.nuevoArray($$[$0-10].toUpperCase(), $$[$0-9], $$[$0-4].toUpperCase(), $$[$0-2], true, _$[$0-11].first_line, _$[$0-11].first_column) 
break;
case 28:
 this.$ = instrucciones.nuevoArray2D($$[$0-15].toUpperCase(), $$[$0-14], $$[$0-7].toUpperCase(), $$[$0-5], $$[$0-2], false, _$[$0-15].first_line, _$[$0-15].first_column) 
break;
case 29:
 this.$ = instrucciones.nuevoArray2D($$[$0-15].toUpperCase(), $$[$0-14], $$[$0-7].toUpperCase(), $$[$0-5], $$[$0-2], true, _$[$0-16].first_line, _$[$0-16].first_column) 
break;
case 30:
 this.$ = instrucciones.nuevoArray2DAsignacion($$[$0-10].toUpperCase(), $$[$0-9], $$[$0-2], false, _$[$0-10].first_line, _$[$0-10].first_column) 
break;
case 31:
 this.$ = instrucciones.nuevoArray2DAsignacion($$[$0-10].toUpperCase(), $$[$0-9], $$[$0-2], true, _$[$0-11].first_line, _$[$0-11].first_column) 
break;
case 32:
 this.$ = instrucciones.nuevoArrayAsignacion($$[$0-8].toUpperCase(), $$[$0-7], $$[$0-2], false, _$[$0-8].first_line, _$[$0-8].first_column) 
break;
case 33:
 this.$ = instrucciones.nuevoArrayAsignacion($$[$0-8].toUpperCase(), $$[$0-7], $$[$0-2], true, _$[$0-9].first_line, _$[$0-9].first_column) 
break;
case 34:
 this.$ = instrucciones.nuevoToCharArray($$[$0-9].toUpperCase(), $$[$0-8], $$[$0-2], false, _$[$0-9].first_line, _$[$0-9].first_column) 
break;
case 35:
 this.$ = instrucciones.nuevoToCharArray($$[$0-9].toUpperCase(), $$[$0-8], $$[$0-2], true, _$[$0-10].first_line, _$[$0-10].first_column) 
break;
case 36:
 this.$ = instrucciones.nuevoArrayModificacion($$[$0-6], $$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column) 
break;
case 37:
 this.$ = instrucciones.nuevoArray2DModificacion($$[$0-9], $$[$0-7], $$[$0-4], $$[$0-1], _$[$0-9].first_line, _$[$0-9].first_column) 
break;
case 38:
 this.$ = instrucciones.nuevoAsignacion($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column)
break;
case 39:
 this.$ = instrucciones.nuevoPostIncremento($$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 40:
 this.$ = instrucciones.nuevoPostDecremento($$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 41:
 this.$ = instrucciones.nuevoPreIncremento($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 42:
 this.$ = instrucciones.nuevoPreDecremento($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 43:
 this.$ = instrucciones.nuevoBreak(_$[$0-1].first_line, _$[$0-1].first_column) 
break;
case 44:
 this.$ = instrucciones.nuevoContinue(_$[$0-1].first_line, _$[$0-1].first_column) 
break;
case 45:
 this.$ = instrucciones.nuevoPush($$[$0-6], $$[$0-2], _$[$0-6].first_line, _$[$0-6].first_column) 
break;
case 46:
 this.$ = instrucciones.nuevoPop($$[$0-5], _$[$0-5].first_line, _$[$0-5].first_column) 
break;
case 47:
 this.$ = instrucciones.nuevoSplice($$[$0-8], $$[$0-4], $$[$0-2], _$[$0-8].first_line, _$[$0-8].first_column) 
break;
case 48:
 this.$ = instrucciones.nuevoGraficarTS(_$[$0-3].first_line, _$[$0-3].first_column) 
break;
case 49: case 106: case 107:
 this.$ = $$[$0] 
break;
case 50:
 
break;
case 51:
 console.log("ERROR SINTACTICO EN LINEA: " + (yylineno+1)); tablaErroresLexSin.add(TIPO_ERROR.SINTACTICO, $$[$0-1], _$[$0-1].first_line+1, _$[$0-1].first_column+1, 'ERROR SINTACTICO')
break;
case 52:
 this.$ = instrucciones.nuevoPrintln($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column) 
break;
case 53:
 this.$ = instrucciones.nuevoPrint($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column) 
break;
case 54:
 this.$ = instrucciones.nuevoAsignacion($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 55:
 this.$ = instrucciones.nuevoPostIncremento($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column) 
break;
case 56:
 this.$ = instrucciones.nuevoPostDecremento($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column) 
break;
case 57:
 this.$ = instrucciones.nuevoPreIncremento($$[$0], _$[$0-1].first_line, _$[$0-1].first_column) 
break;
case 58:
 this.$ = instrucciones.nuevoPreDecremento($$[$0], _$[$0-1].first_line, _$[$0-1].first_column) 
break;
case 60:
 this.$ = instrucciones.nuevoIf($$[$0-4], $$[$0-1]) 
break;
case 61:
 this.$ = instrucciones.nuevoIfElse($$[$0-8], $$[$0-5], $$[$0-1], _$[$0-10].first_line, _$[$0-10].first_column) 
break;
case 62:
 this.$ = instrucciones.nuevoIfElseIf($$[$0-6], $$[$0-3], $$[$0], _$[$0-8].first_line, _$[$0-8].first_column)
break;
case 63: case 64: case 65: case 66: case 67:
this.$ = $$[$0]
break;
case 68:
 this.$ = instrucciones.nuevoValor($$[$0], TIPO_VALOR.CADENA, _$[$0].first_line, _$[$0].first_column) 
break;
case 69:
 this.$ = $$[$0]; 
break;
case 70:
 this.$ = $$[$0].push($$[$0-3]); this.$ = $$[$0] 
break;
case 71:
console.log($$[$0-1]); this.$ = instrucciones.nuevoListaArrays($$[$0-1]) 
break;
case 72:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2] 
break;
case 73:
 this.$ = instrucciones.nuevoListaExpresionesNumericas($$[$0])
break;
case 74:
 this.$ = instrucciones.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.SUMA, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 75:
 this.$ = instrucciones.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.RESTA, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 76:
 this.$ = instrucciones.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MODULO, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 77:
 this.$ = instrucciones.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MULTIPLICACION, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 78:
 this.$ = instrucciones.nuevoOperacionBinaria($$[$0-3], $$[$0], TIPO_OPERACION.POTENCIA, _$[$0-3].first_line, _$[$0-3].first_column) 
break;
case 79:
 this.$ = instrucciones.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.DIVISION, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 80:
 this.$ = instrucciones.nuevoOperacionUnaria($$[$0-1], TIPO_OPERACION.POST_INCREMENTO, _$[$0-1].first_line, _$[$0-1].first_column) 
break;
case 81:
 this.$ = instrucciones.nuevoOperacionUnaria($$[$0-1], TIPO_OPERACION.POST_DECREMENTO, _$[$0-1].first_line, _$[$0-1].first_column) 
break;
case 82:
 this.$ = instrucciones.nuevoOperacionUnaria($$[$0], TIPO_OPERACION.PRE_INCREMENTO, _$[$0-1].first_line, _$[$0-1].first_column) 
break;
case 83:
 this.$ = instrucciones.nuevoOperacionUnaria($$[$0], TIPO_OPERACION.PRE_DECREMENTO, _$[$0-1].first_line, _$[$0-1].first_column) 
break;
case 84:
 this.$ = $$[$0-1] 
break;
case 85:
 this.$ = instrucciones.nuevoOperacionUnaria($$[$0-1], TIPO_OPERACION.TYPEOF, _$[$0-3].first_line, _$[$0-3].first_column) 
break;
case 86:
 this.$ = instrucciones.nuevoOperacionUnaria($$[$0-1], TIPO_OPERACION.TOLOWER, _$[$0-3].first_line, _$[$0-3].first_column) 
break;
case 87:
 this.$ = instrucciones.nuevoOperacionUnaria($$[$0-1], TIPO_OPERACION.TOUPPER, _$[$0-3].first_line, _$[$0-3].first_column) 
break;
case 88:
 this.$ = instrucciones.nuevoOperacionUnaria($$[$0-1], TIPO_OPERACION.LENGTH, _$[$0-3].first_line, _$[$0-3].first_column) 
break;
case 89:
 this.$ = instrucciones.nuevoOperacionUnaria($$[$0-1], TIPO_OPERACION.ROUND, _$[$0-3].first_line, _$[$0-3].first_column) 
break;
case 90:
 this.$ = instrucciones.nuevoArray2DAcceso($$[$0-6], $$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column) 
break;
case 91:
 this.$ = instrucciones.nuevoArrayAcceso($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column ) 
break;
case 92:
 this.$ = instrucciones.nuevoIndexOf($$[$0-5], $$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column) 
break;
case 93:
 this.$ = instrucciones.nuevoPush($$[$0-5], $$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column) 
break;
case 94:
 this.$ = instrucciones.nuevoOperacionUnaria($$[$0], TIPO_OPERACION.NEGATIVO, _$[$0-1].first_line, _$[$0-1].first_column) 
break;
case 95:
 this.$ = instrucciones.nuevoValor(Number($$[$0]), TIPO_VALOR.INT, _$[$0].first_line, _$[$0].first_column) 
break;
case 96:
 this.$ = instrucciones.nuevoValor(parseFloat($$[$0]), TIPO_VALOR.DOUBLE, _$[$0].first_line, _$[$0].first_column)
break;
case 97:
 this.$ = instrucciones.nuevoValor($$[$0].charAt(0), TIPO_VALOR.CHAR, _$[$0].first_line, _$[$0].first_column)
break;
case 98: case 99:
 this.$ = instrucciones.nuevoValor($$[$0], TIPO_VALOR.BOOLEAN, _$[$0].first_line, _$[$0].first_column)
break;
case 100:
 this.$ = instrucciones.nuevoValor($$[$0], TIPO_VALOR.IDENTIFICADOR, _$[$0].first_line, _$[$0].first_column)
break;
case 101:
 this.$ = instrucciones.nuevoValor($$[$0], TIPO_VALOR.CADENA, _$[$0].first_line, _$[$0].first_column)
break;
case 102:
 this.$ = instrucciones.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.AND, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 103:
 this.$ = instrucciones.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.OR, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 104:
 this.$ = instrucciones.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.XOR, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 105:
 this.$ = instrucciones.nuevoOperacionUnaria($$[$0], TIPO_OPERACION.NOT, _$[$0-1].first_line, _$[$0-1].first_column)
break;
case 108:
 this.$ = instrucciones.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MAYOR, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 109:
 this.$ = instrucciones.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MENOR, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 110:
 this.$ = instrucciones.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MAYOR_IGUAL, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 111:
 this.$ = instrucciones.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MENOR_IGUAL, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 112:
 this.$ = instrucciones.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.DOBLE_IGUAL, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 113:
 this.$ = instrucciones.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.DIFERENTE, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 115:
 this.$ = instrucciones.nuevoListaCases($$[$0])
break;
case 116:
 this.$ = instrucciones.nuevoCase($$[$0-4], $$[$0-2], _$[$0-5].first_line, _$[$0-5].first_column) 
break;
case 117:
 this.$ = instrucciones.nuevoCaseDefault($$[$0-2], _$[$0-4].first_line, _$[$0-4].first_column)
break;
case 118:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 119:
 this.$ = instrucciones.nuevoListaParametros($$[$0])
break;
case 120:
 this.$ = instrucciones.nuevoParametro($$[$0-1], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column)
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:$V1,9:$V2,10:$V3,14:$V4,19:$V5,20:$V6,22:$V7,23:$V8,24:$V9,26:$Va,27:$Vb,28:14,29:$Vc,31:$Vd,33:$Ve,39:$Vf,40:$Vg,46:$Vh,47:22,48:$Vi,50:$Vj,51:$Vk,52:$Vl,53:$Vm,54:$Vn},{1:[3]},{2:$V0,5:[1,30],6:31,7:$V1,9:$V2,10:$V3,14:$V4,19:$V5,20:$V6,22:$V7,23:$V8,24:$V9,26:$Va,27:$Vb,28:14,29:$Vc,31:$Vd,33:$Ve,39:$Vf,40:$Vg,46:$Vh,47:22,48:$Vi,50:$Vj,51:$Vk,52:$Vl,53:$Vm,54:$Vn},o($Vo,[2,3]),{2:$V0,4:32,6:3,7:$V1,8:[1,33],9:$V2,10:$V3,14:$V4,19:$V5,20:$V6,22:$V7,23:$V8,24:$V9,26:$Va,27:$Vb,28:14,29:$Vc,31:$Vd,33:$Ve,39:$Vf,40:$Vg,46:$Vh,47:22,48:$Vi,50:$Vj,51:$Vk,52:$Vl,53:$Vm,54:$Vn},{10:[1,34]},{10:[1,35]},{10:$Vp,11:39,15:36,24:$Vq,26:$Vr,27:$Vs,52:$Vt,56:$Vu,58:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,68:$VB,69:$VC,70:$VD,71:$VE,72:37,76:$VF},{10:[1,56]},{10:[1,57]},{7:[1,58]},{10:[1,59]},{24:[1,60]},{24:[1,61]},{24:[1,62]},{28:63,50:$Vj,51:$Vk,52:$Vl,53:$Vm,54:$Vn},{25:[1,64],26:[1,66],27:[1,67],34:[1,65],41:[1,68]},{24:[1,69]},{24:[1,70]},{13:[1,71]},{13:[1,72]},{10:[1,73]},o($Vo,[2,49]),{13:[1,74]},o($VG,[2,63]),o($VG,[2,64]),o($VG,[2,65]),o($VG,[2,66]),o($VG,[2,67]),{10:[1,75]},{1:[2,1]},o($Vo,[2,2]),{2:$V0,6:31,7:$V1,8:[1,76],9:$V2,10:$V3,14:$V4,19:$V5,20:$V6,22:$V7,23:$V8,24:$V9,26:$Va,27:$Vb,28:14,29:$Vc,31:$Vd,33:$Ve,39:$Vf,40:$Vg,46:$Vh,47:22,48:$Vi,50:$Vj,51:$Vk,52:$Vl,53:$Vm,54:$Vn},o($Vo,[2,50]),{10:$Vp,11:77,24:$Vq,26:$Vr,27:$Vs,52:$Vt,56:$Vu,58:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,68:$VB,69:$VC,70:$VD,71:$VE},{10:$Vp,11:78,24:$Vq,26:$Vr,27:$Vs,52:$Vt,56:$Vu,58:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,68:$VB,69:$VC,70:$VD,71:$VE},{12:[1,79]},o($VH,[2,106],{73:[1,80],74:[1,81],75:[1,82]}),{10:$Vp,11:39,24:$Vq,26:$Vr,27:$Vs,52:$Vt,56:$Vu,58:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,68:$VB,69:$VC,70:$VD,71:$VE,72:83},o($VI,$VJ,{26:$VK,27:$VL,57:$VM,58:$VN,59:$VO,60:$VP,61:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW}),{10:$Vp,11:97,24:$Vq,26:$Vr,27:$Vs,52:$Vt,56:$Vu,58:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,68:$VB,69:$VC,70:$VD,71:$VE},{10:$Vp,11:98,24:$Vq,26:$Vr,27:$Vs,52:$Vt,56:$Vu,58:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,68:$VB,69:$VC,70:$VD,71:$VE},{10:$Vp,11:99,24:$Vq,26:$Vr,27:$Vs,52:$Vt,56:$Vu,58:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,68:$VB,69:$VC,70:$VD,71:$VE},{10:[1,100]},{10:[1,101]},{10:[1,102]},{10:[1,103]},{10:[1,104]},o($VX,[2,100],{34:[1,105],41:[1,106]}),{10:$Vp,11:107,24:$Vq,26:$Vr,27:$Vs,52:$Vt,56:$Vu,58:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,68:$VB,69:$VC,70:$VD,71:$VE},o($VX,[2,95]),o($VX,[2,96]),o($VX,[2,97]),o($VX,[2,98]),o($VX,[2,99]),o($VX,[2,101]),{10:$Vp,11:39,15:108,24:$Vq,26:$Vr,27:$Vs,52:$Vt,56:$Vu,58:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,68:$VB,69:$VC,70:$VD,71:$VE,72:37,76:$VF},{10:$Vp,11:109,24:$Vq,26:$Vr,27:$Vs,52:$Vt,56:$Vu,58:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,68:$VB,69:$VC,70:$VD,71:$VE},{2:$V0,4:110,6:3,7:$V1,9:$V2,10:$V3,14:$V4,19:$V5,20:$V6,22:$V7,23:$V8,24:$V9,26:$Va,27:$Vb,28:14,29:$Vc,31:$Vd,33:$Ve,39:$Vf,40:$Vg,46:$Vh,47:22,48:$Vi,50:$Vj,51:$Vk,52:$Vl,53:$Vm,54:$Vn},{24:[1,111],28:112,50:$Vj,51:$Vk,52:$Vl,53:$Vm,54:$Vn},{10:[1,113]},{10:[1,114]},{25:[1,115],34:[1,116]},{24:[1,117]},{10:$Vp,11:119,15:118,24:$Vq,26:$Vr,27:$Vs,52:$Vt,56:$Vu,58:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,68:$VB,69:$VC,70:$VD,71:$VE,72:37,76:$VF},{10:$Vp,11:120,24:$Vq,26:$Vr,27:$Vs,52:$Vt,56:$Vu,58:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,68:$VB,69:$VC,70:$VD,71:$VE},{13:[1,121]},{13:[1,122]},{42:[1,123],43:[1,124],44:[1,125]},{13:[1,126]},{13:[1,127]},o($Vo,$VY),o($Vo,[2,44]),{12:[1,128]},o($Vo,[2,51]),{10:$Vp,11:39,15:129,24:$Vq,26:$Vr,27:$Vs,52:$Vt,56:$Vu,58:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,68:$VB,69:$VC,70:$VD,71:$VE,72:37,76:$VF},o($Vo,[2,4]),{12:[1,130],26:$VK,27:$VL,57:$VM,58:$VN,59:$VO,60:$VP,61:$VQ},{12:[1,131],26:$VK,27:$VL,57:$VM,58:$VN,59:$VO,60:$VP,61:$VQ},{16:[1,132]},{10:$Vp,11:39,24:$Vq,26:$Vr,27:$Vs,52:$Vt,56:$Vu,58:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,68:$VB,69:$VC,70:$VD,71:$VE,72:133},{10:$Vp,11:39,24:$Vq,26:$Vr,27:$Vs,52:$Vt,56:$Vu,58:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,68:$VB,69:$VC,70:$VD,71:$VE,72:134},{10:$Vp,11:39,24:$Vq,26:$Vr,27:$Vs,52:$Vt,56:$Vu,58:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,68:$VB,69:$VC,70:$VD,71:$VE,72:135},o($VH,[2,105]),{10:$Vp,11:136,24:$Vq,26:$Vr,27:$Vs,52:$Vt,56:$Vu,58:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,68:$VB,69:$VC,70:$VD,71:$VE},{10:$Vp,11:137,24:$Vq,26:$Vr,27:$Vs,52:$Vt,56:$Vu,58:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,68:$VB,69:$VC,70:$VD,71:$VE},{10:$Vp,11:138,24:$Vq,26:$Vr,27:$Vs,52:$Vt,56:$Vu,58:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,68:$VB,69:$VC,70:$VD,71:$VE},{10:$Vp,11:139,24:$Vq,26:$Vr,27:$Vs,52:$Vt,56:$Vu,58:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,68:$VB,69:$VC,70:$VD,71:$VE},{10:$Vp,11:140,24:$Vq,26:$Vr,27:$Vs,52:$Vt,56:$Vu,58:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,68:$VB,69:$VC,70:$VD,71:$VE},{10:$Vp,11:141,24:$Vq,26:$Vr,27:$Vs,52:$Vt,56:$Vu,58:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,68:$VB,69:$VC,70:$VD,71:$VE},{10:$Vp,11:142,24:$Vq,26:$Vr,27:$Vs,52:$Vt,56:$Vu,58:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,68:$VB,69:$VC,70:$VD,71:$VE},{10:$Vp,11:143,24:$Vq,26:$Vr,27:$Vs,52:$Vt,56:$Vu,58:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,68:$VB,69:$VC,70:$VD,71:$VE},{10:$Vp,11:144,24:$Vq,26:$Vr,27:$Vs,52:$Vt,56:$Vu,58:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,68:$VB,69:$VC,70:$VD,71:$VE},{10:$Vp,11:145,24:$Vq,26:$Vr,27:$Vs,52:$Vt,56:$Vu,58:$Vv,60:[1,146],62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,68:$VB,69:$VC,70:$VD,71:$VE},{10:$Vp,11:147,24:$Vq,26:$Vr,27:$Vs,52:$Vt,56:$Vu,58:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,68:$VB,69:$VC,70:$VD,71:$VE},o($VX,[2,80]),o($VX,[2,81]),o($VX,[2,82]),o($VX,[2,83]),{12:[1,148],26:$VK,27:$VL,57:$VM,58:$VN,59:$VO,60:$VP,61:$VQ},{10:$Vp,11:149,24:$Vq,26:$Vr,27:$Vs,52:$Vt,56:$Vu,58:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,68:$VB,69:$VC,70:$VD,71:$VE},{10:$Vp,11:150,24:$Vq,26:$Vr,27:$Vs,52:$Vt,56:$Vu,58:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,68:$VB,69:$VC,70:$VD,71:$VE},{10:$Vp,11:151,24:$Vq,26:$Vr,27:$Vs,52:$Vt,56:$Vu,58:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,68:$VB,69:$VC,70:$VD,71:$VE},{10:$Vp,11:152,24:$Vq,26:$Vr,27:$Vs,52:$Vt,56:$Vu,58:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,68:$VB,69:$VC,70:$VD,71:$VE},{10:$Vp,11:153,24:$Vq,26:$Vr,27:$Vs,52:$Vt,56:$Vu,58:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,68:$VB,69:$VC,70:$VD,71:$VE},{10:$Vp,11:154,24:$Vq,26:$Vr,27:$Vs,52:$Vt,56:$Vu,58:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,68:$VB,69:$VC,70:$VD,71:$VE},{42:[1,156],67:[1,155]},o($VZ,[2,94],{26:$VK,27:$VL}),{12:[1,157]},{12:[1,158],26:$VK,27:$VL,57:$VM,58:$VN,59:$VO,60:$VP,61:$VQ},{2:$V0,6:31,7:$V1,8:[1,159],9:$V2,10:$V3,14:$V4,19:$V5,20:$V6,22:$V7,23:$V8,24:$V9,26:$Va,27:$Vb,28:14,29:$Vc,31:$Vd,33:$Ve,39:$Vf,40:$Vg,46:$Vh,47:22,48:$Vi,50:$Vj,51:$Vk,52:$Vl,53:$Vm,54:$Vn},{25:[1,160]},{24:[1,161]},{12:[1,162],28:165,30:163,50:$Vj,51:$Vk,52:$Vl,53:$Vm,54:$Vn,86:164},{10:$Vp,11:168,12:[1,166],24:$Vq,26:$Vr,27:$Vs,32:167,52:$Vt,56:$Vu,58:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,68:$VB,69:$VC,70:$VD,71:$VE},{10:$Vp,11:170,15:169,24:$Vq,26:$Vr,27:$Vs,52:$Vt,56:$Vu,58:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,68:$VB,69:$VC,70:$VD,71:$VE,72:37,76:$VF},{35:[1,171]},{25:[1,172],34:[1,173]},{16:[1,174]},o($V_,$VJ,{13:[1,175],26:$VK,27:$VL,57:$VM,58:$VN,59:$VO,60:$VP,61:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW}),{26:$VK,27:$VL,35:[1,176],57:$VM,58:$VN,59:$VO,60:$VP,61:$VQ},o($Vo,[2,39]),o($Vo,[2,40]),{10:[1,177]},{10:[1,178]},{10:[1,179]},o($Vo,[2,41]),o($Vo,[2,42]),{13:[1,180]},{12:[1,181]},{13:[1,182]},{13:[1,183]},{9:$V$,14:$V01,17:184,24:$V11,26:$V21,27:$V31,31:$V41},o($VH,[2,102]),o($VH,[2,103]),o($VH,[2,104]),o($VI,[2,108],{26:$VK,27:$VL,57:$VM,58:$VN,59:$VO,60:$VP,61:$VQ}),o($VI,[2,109],{26:$VK,27:$VL,57:$VM,58:$VN,59:$VO,60:$VP,61:$VQ}),o($VI,[2,110],{26:$VK,27:$VL,57:$VM,58:$VN,59:$VO,60:$VP,61:$VQ}),o($VI,[2,111],{26:$VK,27:$VL,57:$VM,58:$VN,59:$VO,60:$VP,61:$VQ}),o($VI,[2,112],{26:$VK,27:$VL,57:$VM,58:$VN,59:$VO,60:$VP,61:$VQ}),o($VI,[2,113],{26:$VK,27:$VL,57:$VM,58:$VN,59:$VO,60:$VP,61:$VQ}),o($V51,[2,74],{26:$VK,27:$VL,59:$VO,60:$VP,61:$VQ}),o($V51,[2,75],{26:$VK,27:$VL,59:$VO,60:$VP,61:$VQ}),o($VZ,[2,76],{26:$VK,27:$VL}),o($VZ,[2,77],{26:$VK,27:$VL}),{10:$Vp,11:191,24:$Vq,26:$Vr,27:$Vs,52:$Vt,56:$Vu,58:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,68:$VB,69:$VC,70:$VD,71:$VE},o($VZ,[2,79],{26:$VK,27:$VL}),o($VX,[2,84]),{12:[1,192],26:$VK,27:$VL,57:$VM,58:$VN,59:$VO,60:$VP,61:$VQ},{12:[1,193],26:$VK,27:$VL,57:$VM,58:$VN,59:$VO,60:$VP,61:$VQ},{12:[1,194],26:$VK,27:$VL,57:$VM,58:$VN,59:$VO,60:$VP,61:$VQ},{12:[1,195],26:$VK,27:$VL,57:$VM,58:$VN,59:$VO,60:$VP,61:$VQ},{12:[1,196],26:$VK,27:$VL,57:$VM,58:$VN,59:$VO,60:$VP,61:$VQ},{26:$VK,27:$VL,35:[1,197],57:$VM,58:$VN,59:$VO,60:$VP,61:$VQ},{10:[1,198]},{10:[1,199]},{7:[1,200]},{7:[1,201]},{19:[1,202]},{10:$Vp,11:203,24:$Vq,26:$Vr,27:$Vs,52:$Vt,56:$Vu,58:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,68:$VB,69:$VC,70:$VD,71:$VE},{25:[1,204]},{7:[1,205]},{12:[1,206],45:[1,207]},o($V61,[2,119]),{24:[1,208]},{13:[1,209]},{12:[1,210],45:$V71},o($V81,[2,73],{26:$VK,27:$VL,57:$VM,58:$VN,59:$VO,60:$VP,61:$VQ}),{16:[1,212]},o($V_,$VJ,{13:[1,213],26:$VK,27:$VL,57:$VM,58:$VN,59:$VO,60:$VP,61:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW}),{25:[1,214],34:[1,215]},{10:$Vp,11:217,15:216,24:$Vq,26:$Vr,27:$Vs,52:$Vt,56:$Vu,58:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,68:$VB,69:$VC,70:$VD,71:$VE,72:37,76:$VF},{35:[1,218]},{10:$Vp,11:219,24:$Vq,26:$Vr,27:$Vs,52:$Vt,56:$Vu,58:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,68:$VB,69:$VC,70:$VD,71:$VE},o($Vo,[2,38]),{25:[1,220],34:[1,221]},{10:$Vp,11:222,24:$Vq,26:$Vr,27:$Vs,52:$Vt,56:$Vu,58:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,68:$VB,69:$VC,70:$VD,71:$VE},{12:[1,223]},{10:$Vp,11:224,24:$Vq,26:$Vr,27:$Vs,52:$Vt,56:$Vu,58:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,68:$VB,69:$VC,70:$VD,71:$VE},o($Vo,[2,48]),{7:[1,225]},o($Vo,[2,5]),o($Vo,[2,6]),{18:[1,226]},{10:[1,227]},{10:[1,228]},{25:[1,229],26:[1,230],27:[1,231]},{24:[1,232]},{24:[1,233]},{24:[1,234]},o($VZ,[2,78],{26:$VK,27:$VL}),o($VX,[2,85]),o($VX,[2,86]),o($VX,[2,87]),o($VX,[2,88]),o($VX,[2,89]),o($VX,[2,91],{34:[1,235]}),{10:$Vp,11:236,24:$Vq,26:$Vr,27:$Vs,52:$Vt,56:$Vu,58:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,68:$VB,69:$VC,70:$VD,71:$VE},{10:$Vp,11:237,24:$Vq,26:$Vr,27:$Vs,52:$Vt,56:$Vu,58:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,68:$VB,69:$VC,70:$VD,71:$VE},{2:$V0,4:238,6:3,7:$V1,9:$V2,10:$V3,14:$V4,19:$V5,20:$V6,22:$V7,23:$V8,24:$V9,26:$Va,27:$Vb,28:14,29:$Vc,31:$Vd,33:$Ve,39:$Vf,40:$Vg,46:$Vh,47:22,48:$Vi,50:$Vj,51:$Vk,52:$Vl,53:$Vm,54:$Vn},{21:239,83:240,84:$V91,85:$Va1},{10:[1,243]},{13:[1,244],26:$VK,27:$VL,57:$VM,58:$VN,59:$VO,60:$VP,61:$VQ},{10:$Vp,11:245,24:$Vq,26:$Vr,27:$Vs,52:$Vt,56:$Vu,58:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,68:$VB,69:$VC,70:$VD,71:$VE},{2:$V0,4:246,6:3,7:$V1,9:$V2,10:$V3,14:$V4,19:$V5,20:$V6,22:$V7,23:$V8,24:$V9,26:$Va,27:$Vb,28:14,29:$Vc,31:$Vd,33:$Ve,39:$Vf,40:$Vg,46:$Vh,47:22,48:$Vi,50:$Vj,51:$Vk,52:$Vl,53:$Vm,54:$Vn},{7:[1,247]},{28:165,50:$Vj,51:$Vk,52:$Vl,53:$Vm,54:$Vn,86:248},o($V61,[2,120]),o($Vo,[2,19]),{13:[1,249]},{10:$Vp,11:250,24:$Vq,26:$Vr,27:$Vs,52:$Vt,56:$Vu,58:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,68:$VB,69:$VC,70:$VD,71:$VE},{10:$Vp,11:251,24:$Vq,26:$Vr,27:$Vs,52:$Vt,56:$Vu,58:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,68:$VB,69:$VC,70:$VD,71:$VE},o($Vo,[2,24]),{34:[1,253],36:[1,252],38:[1,254]},{35:[1,255]},{16:[1,256]},o($V_,$VJ,{13:[1,257],26:$VK,27:$VL,57:$VM,58:$VN,59:$VO,60:$VP,61:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW}),{25:[1,258],34:[1,259]},{18:[1,260],26:$VK,27:$VL,57:$VM,58:$VN,59:$VO,60:$VP,61:$VQ},{10:$Vp,11:261,24:$Vq,26:$Vr,27:$Vs,52:$Vt,56:$Vu,58:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,68:$VB,69:$VC,70:$VD,71:$VE},{10:$Vp,11:262,24:$Vq,26:$Vr,27:$Vs,52:$Vt,56:$Vu,58:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,68:$VB,69:$VC,70:$VD,71:$VE},{12:[1,263],26:$VK,27:$VL,57:$VM,58:$VN,59:$VO,60:$VP,61:$VQ},{13:[1,264]},{26:$VK,27:$VL,45:[1,265],57:$VM,58:$VN,59:$VO,60:$VP,61:$VQ},{2:$V0,4:266,6:3,7:$V1,9:$V2,10:$V3,14:$V4,19:$V5,20:$V6,22:$V7,23:$V8,24:$V9,26:$Va,27:$Vb,28:14,29:$Vc,31:$Vd,33:$Ve,39:$Vf,40:$Vg,46:$Vh,47:22,48:$Vi,50:$Vj,51:$Vk,52:$Vl,53:$Vm,54:$Vn},{9:$V$,14:$V01,17:267,24:$V11,26:$V21,27:$V31,31:$V41},{10:$Vp,11:268,24:$Vq,26:$Vr,27:$Vs,52:$Vt,56:$Vu,58:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,68:$VB,69:$VC,70:$VD,71:$VE},{10:$Vp,11:269,24:$Vq,26:$Vr,27:$Vs,52:$Vt,56:$Vu,58:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,68:$VB,69:$VC,70:$VD,71:$VE},{10:$Vp,11:270,24:$Vq,26:$Vr,27:$Vs,52:$Vt,56:$Vu,58:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,68:$VB,69:$VC,70:$VD,71:$VE},o($Vb1,[2,55]),o($Vb1,[2,56]),o($Vb1,[2,57]),o($Vb1,[2,58]),{10:[1,271]},{10:$Vp,11:272,24:$Vq,26:$Vr,27:$Vs,52:$Vt,56:$Vu,58:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,68:$VB,69:$VC,70:$VD,71:$VE},{12:[1,273],26:$VK,27:$VL,57:$VM,58:$VN,59:$VO,60:$VP,61:$VQ},{12:[1,274],26:$VK,27:$VL,57:$VM,58:$VN,59:$VO,60:$VP,61:$VQ},{2:$V0,6:31,7:$V1,8:[1,275],9:$V2,10:$V3,14:$V4,19:$V5,20:$V6,22:$V7,23:$V8,24:$V9,26:$Va,27:$Vb,28:14,29:$Vc,31:$Vd,33:$Ve,39:$Vf,40:$Vg,46:$Vh,47:22,48:$Vi,50:$Vj,51:$Vk,52:$Vl,53:$Vm,54:$Vn},{8:[1,276],83:277,84:$V91,85:$Va1},o($Vc1,[2,115]),{10:$Vp,11:278,24:$Vq,26:$Vr,27:$Vs,52:$Vt,56:$Vu,58:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,68:$VB,69:$VC,70:$VD,71:$VE},{18:[1,279]},{10:$Vp,11:39,15:280,24:$Vq,26:$Vr,27:$Vs,52:$Vt,56:$Vu,58:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,68:$VB,69:$VC,70:$VD,71:$VE,72:37,76:$VF},{10:$Vp,11:39,15:281,24:$Vq,26:$Vr,27:$Vs,52:$Vt,56:$Vu,58:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,68:$VB,69:$VC,70:$VD,71:$VE,72:37,76:$VF},{13:[1,282],26:$VK,27:$VL,57:$VM,58:$VN,59:$VO,60:$VP,61:$VQ},{2:$V0,6:31,7:$V1,8:[1,283],9:$V2,10:$V3,14:$V4,19:$V5,20:$V6,22:$V7,23:$V8,24:$V9,26:$Va,27:$Vb,28:14,29:$Vc,31:$Vd,33:$Ve,39:$Vf,40:$Vg,46:$Vh,47:22,48:$Vi,50:$Vj,51:$Vk,52:$Vl,53:$Vm,54:$Vn},{2:$V0,4:284,6:3,7:$V1,9:$V2,10:$V3,14:$V4,19:$V5,20:$V6,22:$V7,23:$V8,24:$V9,26:$Va,27:$Vb,28:14,29:$Vc,31:$Vd,33:$Ve,39:$Vf,40:$Vg,46:$Vh,47:22,48:$Vi,50:$Vj,51:$Vk,52:$Vl,53:$Vm,54:$Vn},o($V61,[2,118]),o($Vo,[2,20]),o($V81,[2,72],{26:$VK,27:$VL,57:$VM,58:$VN,59:$VO,60:$VP,61:$VQ}),{18:[1,285],26:$VK,27:$VL,57:$VM,58:$VN,59:$VO,60:$VP,61:$VQ},{28:286,50:$Vj,51:$Vk,52:$Vl,53:$Vm,54:$Vn},{10:$Vp,11:168,24:$Vq,26:$Vr,27:$Vs,32:287,52:$Vt,56:$Vu,58:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,68:$VB,69:$VC,70:$VD,71:$VE},{10:[1,288]},{25:[1,289]},{10:$Vp,11:290,24:$Vq,26:$Vr,27:$Vs,52:$Vt,56:$Vu,58:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,68:$VB,69:$VC,70:$VD,71:$VE},o($Vo,[2,25]),{34:[1,292],36:[1,291],38:[1,293]},{35:[1,294]},{10:$Vp,11:295,24:$Vq,26:$Vr,27:$Vs,52:$Vt,56:$Vu,58:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,68:$VB,69:$VC,70:$VD,71:$VE},{13:[1,296],26:$VK,27:$VL,57:$VM,58:$VN,59:$VO,60:$VP,61:$VQ},{26:$VK,27:$VL,35:[1,297],57:$VM,58:$VN,59:$VO,60:$VP,61:$VQ},{13:[1,298]},o($Vo,[2,46]),{10:$Vp,11:299,24:$Vq,26:$Vr,27:$Vs,52:$Vt,56:$Vu,58:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,68:$VB,69:$VC,70:$VD,71:$VE},{2:$V0,6:31,7:$V1,8:[1,300],9:$V2,10:$V3,14:$V4,19:$V5,20:$V6,22:$V7,23:$V8,24:$V9,26:$Va,27:$Vb,28:14,29:$Vc,31:$Vd,33:$Ve,39:$Vf,40:$Vg,46:$Vh,47:22,48:$Vi,50:$Vj,51:$Vk,52:$Vl,53:$Vm,54:$Vn},{13:[1,301]},{12:[1,302],26:$VK,27:$VL,57:$VM,58:$VN,59:$VO,60:$VP,61:$VQ},{12:[1,303],26:$VK,27:$VL,57:$VM,58:$VN,59:$VO,60:$VP,61:$VQ},o($Vb1,[2,54],{26:$VK,27:$VL,57:$VM,58:$VN,59:$VO,60:$VP,61:$VQ}),{12:[1,304]},{26:$VK,27:$VL,35:[1,305],57:$VM,58:$VN,59:$VO,60:$VP,61:$VQ},o($VX,[2,92]),o($VX,[2,93]),o($Vo,[2,8]),o($Vo,[2,9]),o($Vc1,[2,114]),{18:[1,306],26:$VK,27:$VL,57:$VM,58:$VN,59:$VO,60:$VP,61:$VQ},{2:$V0,4:307,6:3,7:$V1,9:$V2,10:$V3,14:$V4,19:$V5,20:$V6,22:$V7,23:$V8,24:$V9,26:$Va,27:$Vb,28:14,29:$Vc,31:$Vd,33:$Ve,39:$Vf,40:$Vg,46:$Vh,47:22,48:$Vi,50:$Vj,51:$Vk,52:$Vl,53:$Vm,54:$Vn},{12:[1,308]},{13:[1,309]},{10:$Vp,11:39,15:310,24:$Vq,26:$Vr,27:$Vs,52:$Vt,56:$Vu,58:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,68:$VB,69:$VC,70:$VD,71:$VE,72:37,76:$VF},o($Vo,[2,17]),{2:$V0,6:31,7:$V1,8:[1,311],9:$V2,10:$V3,14:$V4,19:$V5,20:$V6,22:$V7,23:$V8,24:$V9,26:$Va,27:$Vb,28:14,29:$Vc,31:$Vd,33:$Ve,39:$Vf,40:$Vg,46:$Vh,47:22,48:$Vi,50:$Vj,51:$Vk,52:$Vl,53:$Vm,54:$Vn},{10:$Vp,11:312,24:$Vq,26:$Vr,27:$Vs,52:$Vt,56:$Vu,58:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,68:$VB,69:$VC,70:$VD,71:$VE},{34:[1,313]},{35:[1,314],45:$V71},{10:$Vp,11:315,24:$Vq,26:$Vr,27:$Vs,52:$Vt,56:$Vu,58:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,68:$VB,69:$VC,70:$VD,71:$VE},{34:[1,317],36:[1,316]},{18:[1,318],26:$VK,27:$VL,57:$VM,58:$VN,59:$VO,60:$VP,61:$VQ},{28:319,50:$Vj,51:$Vk,52:$Vl,53:$Vm,54:$Vn},{10:$Vp,11:168,24:$Vq,26:$Vr,27:$Vs,32:320,52:$Vt,56:$Vu,58:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,68:$VB,69:$VC,70:$VD,71:$VE},{10:[1,321]},{25:[1,322]},{13:[1,323],26:$VK,27:$VL,57:$VM,58:$VN,59:$VO,60:$VP,61:$VQ},o($Vo,[2,36]),{25:[1,324]},o($Vo,[2,45]),{12:[1,325],26:$VK,27:$VL,57:$VM,58:$VN,59:$VO,60:$VP,61:$VQ},o($Vo,[2,60],{49:[1,326]}),o($Vo,[2,7]),o($Vb1,[2,52]),o($Vb1,[2,53]),{13:[1,327]},o($VX,[2,90]),{2:$V0,4:328,6:3,7:$V1,9:$V2,10:$V3,14:$V4,19:$V5,20:$V6,22:$V7,23:$V8,24:$V9,26:$Va,27:$Vb,28:14,29:$Vc,31:$Vd,33:$Ve,39:$Vf,40:$Vg,46:$Vh,47:22,48:$Vi,50:$Vj,51:$Vk,52:$Vl,53:$Vm,54:$Vn},{2:$V0,6:31,7:$V1,9:$V2,10:$V3,14:$V4,19:$V5,20:$V6,22:$V7,23:$V8,24:$V9,26:$Va,27:$Vb,28:14,29:$Vc,31:$Vd,33:$Ve,39:[1,329],40:$Vg,46:$Vh,47:22,48:$Vi,50:$Vj,51:$Vk,52:$Vl,53:$Vm,54:$Vn},{13:[1,330]},{24:[1,331]},{13:[1,332]},o($Vo,[2,18]),{13:[1,333],26:$VK,27:$VL,57:$VM,58:$VN,59:$VO,60:$VP,61:$VQ},{10:$Vp,11:334,24:$Vq,26:$Vr,27:$Vs,52:$Vt,56:$Vu,58:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,68:$VB,69:$VC,70:$VD,71:$VE},{13:[1,335]},{12:[1,336],26:$VK,27:$VL,57:$VM,58:$VN,59:$VO,60:$VP,61:$VQ},{28:337,50:$Vj,51:$Vk,52:$Vl,53:$Vm,54:$Vn},{34:$Vd1,37:338},{10:$Vp,11:340,24:$Vq,26:$Vr,27:$Vs,52:$Vt,56:$Vu,58:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,68:$VB,69:$VC,70:$VD,71:$VE},{34:[1,341]},{35:[1,342],45:$V71},{10:$Vp,11:343,24:$Vq,26:$Vr,27:$Vs,52:$Vt,56:$Vu,58:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,68:$VB,69:$VC,70:$VD,71:$VE},{34:[1,345],36:[1,344]},o($Vo,[2,23]),{10:$Vp,11:346,24:$Vq,26:$Vr,27:$Vs,52:$Vt,56:$Vu,58:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,68:$VB,69:$VC,70:$VD,71:$VE},{13:[1,347]},{7:[1,348],47:349,48:$Vi},o($Vb1,[2,59]),{2:$V0,6:31,7:$V1,9:$V2,10:$V3,14:$V4,19:$V5,20:$V6,22:$V7,23:$V8,24:$V9,26:$Va,27:$Vb,28:14,29:$Vc,31:$Vd,33:$Ve,39:[1,350],40:$Vg,46:$Vh,47:22,48:$Vi,50:$Vj,51:$Vk,52:$Vl,53:$Vm,54:$Vn},{13:[1,351]},o($Vo,[2,10]),{25:[1,354],26:[1,352],27:[1,353]},{24:[1,355]},o($Vo,[2,21]),{26:$VK,27:$VL,35:[1,356],57:$VM,58:$VN,59:$VO,60:$VP,61:$VQ},o($Vo,[2,32]),{13:[1,357]},{34:[1,358]},{35:[1,359]},{10:$Vp,11:168,24:$Vq,26:$Vr,27:$Vs,32:360,52:$Vt,56:$Vu,58:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,68:$VB,69:$VC,70:$VD,71:$VE},{13:[1,361],26:$VK,27:$VL,57:$VM,58:$VN,59:$VO,60:$VP,61:$VQ},{10:$Vp,11:362,24:$Vq,26:$Vr,27:$Vs,52:$Vt,56:$Vu,58:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,68:$VB,69:$VC,70:$VD,71:$VE},{13:[1,363]},{12:[1,364],26:$VK,27:$VL,57:$VM,58:$VN,59:$VO,60:$VP,61:$VQ},{28:365,50:$Vj,51:$Vk,52:$Vl,53:$Vm,54:$Vn},{34:$Vd1,37:366},{13:[1,367],26:$VK,27:$VL,57:$VM,58:$VN,59:$VO,60:$VP,61:$VQ},o($Vo,[2,47]),{2:$V0,4:368,6:3,7:$V1,9:$V2,10:$V3,14:$V4,19:$V5,20:$V6,22:$V7,23:$V8,24:$V9,26:$Va,27:$Vb,28:14,29:$Vc,31:$Vd,33:$Ve,39:$Vf,40:$Vg,46:$Vh,47:22,48:$Vi,50:$Vj,51:$Vk,52:$Vl,53:$Vm,54:$Vn},o($Vo,[2,62]),{13:[1,369]},o($Ve1,$VY,{8:$Vf1,84:$Vf1,85:$Vf1}),{12:[1,370]},{12:[1,371]},{10:$Vp,11:372,24:$Vq,26:$Vr,27:$Vs,52:$Vt,56:$Vu,58:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,68:$VB,69:$VC,70:$VD,71:$VE},{25:[1,373],26:[1,374],27:[1,375]},{13:[1,376]},o($Vo,[2,34]),{10:$Vp,11:377,24:$Vq,26:$Vr,27:$Vs,52:$Vt,56:$Vu,58:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,68:$VB,69:$VC,70:$VD,71:$VE},{13:[1,378]},{35:[1,379],45:$V71},o($Vo,[2,22]),{26:$VK,27:$VL,35:[1,380],57:$VM,58:$VN,59:$VO,60:$VP,61:$VQ},o($Vo,[2,33]),{13:[1,381]},{34:[1,382]},{35:[1,383]},o($Vo,[2,37]),{2:$V0,6:31,7:$V1,8:[1,384],9:$V2,10:$V3,14:$V4,19:$V5,20:$V6,22:$V7,23:$V8,24:$V9,26:$Va,27:$Vb,28:14,29:$Vc,31:$Vd,33:$Ve,39:$Vf,40:$Vg,46:$Vh,47:22,48:$Vi,50:$Vj,51:$Vk,52:$Vl,53:$Vm,54:$Vn},o($Ve1,$VY,{8:$Vg1,84:$Vg1,85:$Vg1}),{7:[1,385]},{7:[1,386]},{12:[1,387],26:$VK,27:$VL,57:$VM,58:$VN,59:$VO,60:$VP,61:$VQ},{10:$Vp,11:388,24:$Vq,26:$Vr,27:$Vs,52:$Vt,56:$Vu,58:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,68:$VB,69:$VC,70:$VD,71:$VE},{12:[1,389]},{12:[1,390]},o($Vo,[2,26]),{26:$VK,27:$VL,35:[1,391],57:$VM,58:$VN,59:$VO,60:$VP,61:$VQ},o($Vo,[2,30]),{35:[2,71],45:[1,392]},{13:[1,393]},o($Vo,[2,35]),{10:$Vp,11:394,24:$Vq,26:$Vr,27:$Vs,52:$Vt,56:$Vu,58:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,68:$VB,69:$VC,70:$VD,71:$VE},{13:[1,395]},o($Vo,[2,61]),{2:$V0,4:396,6:3,7:$V1,9:$V2,10:$V3,14:$V4,19:$V5,20:$V6,22:$V7,23:$V8,24:$V9,26:$Va,27:$Vb,28:14,29:$Vc,31:$Vd,33:$Ve,39:$Vf,40:$Vg,46:$Vh,47:22,48:$Vi,50:$Vj,51:$Vk,52:$Vl,53:$Vm,54:$Vn},{2:$V0,4:397,6:3,7:$V1,9:$V2,10:$V3,14:$V4,19:$V5,20:$V6,22:$V7,23:$V8,24:$V9,26:$Va,27:$Vb,28:14,29:$Vc,31:$Vd,33:$Ve,39:$Vf,40:$Vg,46:$Vh,47:22,48:$Vi,50:$Vj,51:$Vk,52:$Vl,53:$Vm,54:$Vn},{7:[1,398]},{12:[1,399],26:$VK,27:$VL,57:$VM,58:$VN,59:$VO,60:$VP,61:$VQ},{7:[1,400]},{7:[1,401]},{34:[1,402]},{34:$Vd1,37:403},o($Vo,[2,27]),{26:$VK,27:$VL,35:[1,404],57:$VM,58:$VN,59:$VO,60:$VP,61:$VQ},o($Vo,[2,31]),{2:$V0,6:31,7:$V1,8:[1,405],9:$V2,10:$V3,14:$V4,19:$V5,20:$V6,22:$V7,23:$V8,24:$V9,26:$Va,27:$Vb,28:14,29:$Vc,31:$Vd,33:$Ve,39:$Vf,40:$Vg,46:$Vh,47:22,48:$Vi,50:$Vj,51:$Vk,52:$Vl,53:$Vm,54:$Vn},{2:$V0,6:31,7:$V1,8:[1,406],9:$V2,10:$V3,14:$V4,19:$V5,20:$V6,22:$V7,23:$V8,24:$V9,26:$Va,27:$Vb,28:14,29:$Vc,31:$Vd,33:$Ve,39:$Vf,40:$Vg,46:$Vh,47:22,48:$Vi,50:$Vj,51:$Vk,52:$Vl,53:$Vm,54:$Vn},{2:$V0,4:407,6:3,7:$V1,9:$V2,10:$V3,14:$V4,19:$V5,20:$V6,22:$V7,23:$V8,24:$V9,26:$Va,27:$Vb,28:14,29:$Vc,31:$Vd,33:$Ve,39:$Vf,40:$Vg,46:$Vh,47:22,48:$Vi,50:$Vj,51:$Vk,52:$Vl,53:$Vm,54:$Vn},{7:[1,408]},{2:$V0,4:409,6:3,7:$V1,9:$V2,10:$V3,14:$V4,19:$V5,20:$V6,22:$V7,23:$V8,24:$V9,26:$Va,27:$Vb,28:14,29:$Vc,31:$Vd,33:$Ve,39:$Vf,40:$Vg,46:$Vh,47:22,48:$Vi,50:$Vj,51:$Vk,52:$Vl,53:$Vm,54:$Vn},{2:$V0,4:410,6:3,7:$V1,9:$V2,10:$V3,14:$V4,19:$V5,20:$V6,22:$V7,23:$V8,24:$V9,26:$Va,27:$Vb,28:14,29:$Vc,31:$Vd,33:$Ve,39:$Vf,40:$Vg,46:$Vh,47:22,48:$Vi,50:$Vj,51:$Vk,52:$Vl,53:$Vm,54:$Vn},{10:$Vp,11:411,24:$Vq,26:$Vr,27:$Vs,52:$Vt,56:$Vu,58:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,68:$VB,69:$VC,70:$VD,71:$VE},{35:[2,70]},{34:[1,412]},o($Vo,[2,11]),o($Vo,[2,12]),{2:$V0,6:31,7:$V1,8:[1,413],9:$V2,10:$V3,14:$V4,19:$V5,20:$V6,22:$V7,23:$V8,24:$V9,26:$Va,27:$Vb,28:14,29:$Vc,31:$Vd,33:$Ve,39:$Vf,40:$Vg,46:$Vh,47:22,48:$Vi,50:$Vj,51:$Vk,52:$Vl,53:$Vm,54:$Vn},{2:$V0,4:414,6:3,7:$V1,9:$V2,10:$V3,14:$V4,19:$V5,20:$V6,22:$V7,23:$V8,24:$V9,26:$Va,27:$Vb,28:14,29:$Vc,31:$Vd,33:$Ve,39:$Vf,40:$Vg,46:$Vh,47:22,48:$Vi,50:$Vj,51:$Vk,52:$Vl,53:$Vm,54:$Vn},{2:$V0,6:31,7:$V1,8:[1,415],9:$V2,10:$V3,14:$V4,19:$V5,20:$V6,22:$V7,23:$V8,24:$V9,26:$Va,27:$Vb,28:14,29:$Vc,31:$Vd,33:$Ve,39:$Vf,40:$Vg,46:$Vh,47:22,48:$Vi,50:$Vj,51:$Vk,52:$Vl,53:$Vm,54:$Vn},{2:$V0,6:31,7:$V1,8:[1,416],9:$V2,10:$V3,14:$V4,19:$V5,20:$V6,22:$V7,23:$V8,24:$V9,26:$Va,27:$Vb,28:14,29:$Vc,31:$Vd,33:$Ve,39:$Vf,40:$Vg,46:$Vh,47:22,48:$Vi,50:$Vj,51:$Vk,52:$Vl,53:$Vm,54:$Vn},{26:$VK,27:$VL,35:[1,417],57:$VM,58:$VN,59:$VO,60:$VP,61:$VQ},{10:$Vp,11:418,24:$Vq,26:$Vr,27:$Vs,52:$Vt,56:$Vu,58:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,68:$VB,69:$VC,70:$VD,71:$VE},o($Vo,[2,13]),{2:$V0,6:31,7:$V1,8:[1,419],9:$V2,10:$V3,14:$V4,19:$V5,20:$V6,22:$V7,23:$V8,24:$V9,26:$Va,27:$Vb,28:14,29:$Vc,31:$Vd,33:$Ve,39:$Vf,40:$Vg,46:$Vh,47:22,48:$Vi,50:$Vj,51:$Vk,52:$Vl,53:$Vm,54:$Vn},o($Vo,[2,15]),o($Vo,[2,16]),{13:[1,420]},{26:$VK,27:$VL,35:[1,421],57:$VM,58:$VN,59:$VO,60:$VP,61:$VQ},o($Vo,[2,14]),o($Vo,[2,28]),{13:[1,422]},o($Vo,[2,29])],
defaultActions: {30:[2,1],403:[2,70]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};
  
        const TIPO_OPERACION = require('./operaciones').TIPO_OPERACION
        const TIPO_VALOR = require('./operaciones').TIPO_VALOR
        const TIPO_DATO = require('./tablaSimbolos').TIPO_DATO
        const instrucciones = require('./operaciones').instrucciones
        const {TIPO_ERROR, TablaErrores} = require('./tablaErrores')
        const tablaErroresLexSin = new TablaErrores([])
        module.exports.tablaErroresLexSin = tablaErroresLexSin
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:// Multicomentario
break;
case 2:// Comentario
break;
case 3:return 50;
break;
case 4:return 51;
break;
case 5:return 52;
break;
case 6:return 53;
break;
case 7:return 54;
break;
case 8:return 48;
break;
case 9:return 49;
break;
case 10:return 20;
break;
case 11:return 84;
break;
case 12:return 85;
break;
case 13:return 39;
break;
case 14:return 23;
break;
case 15:return 19;
break;
case 16:return 22;
break;
case 17:return 40;
break;
case 18:return 29;
break;
case 19:return 'RETURN';
break;
case 20:return 31;
break;
case 21:return 'RETURN';
break;
case 22:return 9;
break;
case 23:return 14;
break;
case 24:return 62;
break;
case 25:return 70;
break;
case 26:return 71;
break;
case 27:return 'IMPORT';
break;
case 28:return 'MAIN';
break;
case 29:return 33;
break;
case 30:return 63;
break;
case 31:return 64;
break;
case 32:return 66;
break;
case 33:return 36;
break;
case 34:return 65;
break;
case 35:return 38;
break;
case 36:return 67;
break;
case 37:return 42;
break;
case 38:return 43;
break;
case 39:return 44;
break;
case 40:return 46;
break;
case 41:return 13;   
break;
case 42:return 45;      
break;
case 43:return 18;  
break;
case 44:return 26;
break;
case 45:return 27; 
break;
case 46:return 79;        
break;
case 47:return 80;
break;
case 48:return 77;             
break;
case 49:return 78; 
break;
case 50:return 82;   
break;
case 51:return 81;   
break;
case 52:return 76;
break;
case 53:return 25;   
break;
case 54:return 74;           
break;
case 55:return 73;
break;
case 56:return 75;
break;
case 57:return 57;
break;
case 58:return 58;  
break;
case 59:return 61;      
break;
case 60:return 60;
break;
case 61:return 'POTENCIA';
break;
case 62: return 59;
break;
case 63:return 10;
break;
case 64:return 12; 
break;
case 65:return 7;     
break;
case 66:return 8;
break;
case 67:return 34;
break;
case 68:return 35;
break;
case 69:return 16;
break;
case 70:return 41;
break;
case 71:
break;
case 72:
break;
case 73: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 56; 
break;
case 74:return 69; 
break;
case 75: return 68; 
break;
case 76: yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 52
break;
case 77: return 24; 
break;
case 78:return 5;
break;
case 79: 
        tablaErroresLexSin.add(TIPO_ERROR.LEXICO, yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column, 'ERROR LEXICO')
        console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);

    
break;
}
},
rules: [/^(?:\s+)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:\/\/.*)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:char\b)/i,/^(?:boolean\b)/i,/^(?:String\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?:for\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:continue\b)/i,/^(?:void\b)/i,/^(?:return\b)/i,/^(?:call\b)/i,/^(?:return\b)/i,/^(?:println\b)/i,/^(?:print\b)/i,/^(?:typeof\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:import\b)/i,/^(?:main\b)/i,/^(?:const\b)/i,/^(?:tolower\b)/i,/^(?:toupper\b)/i,/^(?:round\b)/i,/^(?:new\b)/i,/^(?:length\b)/i,/^(?:tochararray\b)/i,/^(?:indexof\b)/i,/^(?:push\b)/i,/^(?:pop\b)/i,/^(?:splice\b)/i,/^(?:graficar_ts\b)/i,/^(?:;)/i,/^(?:,)/i,/^(?::)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:!=)/i,/^(?:==)/i,/^(?:!)/i,/^(?:=)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:\^)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\/)/i,/^(?:\*)/i,/^(?:\*\*)/i,/^(?:%)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\?)/i,/^(?:\.)/i,/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:"([^\\\"]|\\.)*")/i,/^(?:[0-9]+\.([0-9]+)?\b)/i,/^(?:[0-9]+\b)/i,/^(?:('(\\(["'\\bfnrt]|u[0-9A-Fa-f]{4})|[^\\'])'))/i,/^(?:([a-zA-Z_])[a-zA-Z0-9_ñÑ]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"cadena":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79],"inclusive":true},"caracter":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79],"inclusive":true},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}