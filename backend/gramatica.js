/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,4],$V1=[1,5],$V2=[1,6],$V3=[1,7],$V4=[1,8],$V5=[1,11],$V6=[1,12],$V7=[1,13],$V8=[1,10],$V9=[1,14],$Va=[1,21],$Vb=[1,16],$Vc=[1,17],$Vd=[1,18],$Ve=[1,19],$Vf=[1,20],$Vg=[5,7,13,15,18,20,21,22,24,25,27,28,30,32,33,34,35,36],$Vh=[1,42],$Vi=[1,47],$Vj=[1,48],$Vk=[1,49],$Vl=[1,40],$Vm=[1,41],$Vn=[1,46],$Vo=[1,50],$Vp=[1,43],$Vq=[1,44],$Vr=[1,45],$Vs=[1,52],$Vt=[2,26],$Vu=[1,76],$Vv=[1,77],$Vw=[1,70],$Vx=[1,71],$Vy=[1,72],$Vz=[1,73],$VA=[1,74],$VB=[1,75],$VC=[1,78],$VD=[1,79],$VE=[1,80],$VF=[1,81],$VG=[1,82],$VH=[1,83],$VI=[10,11,24,25,39,40,41,42,43,44,48,49,51,52,53,54,55,56,59],$VJ=[2,53],$VK=[2,54],$VL=[10,11],$VM=[24,25,39,40,41,42,43,44,51,52,53,54,55,56],$VN=[10,11,39,40,41,42,43,44,48,49,51,52,53,54,55,56,59],$VO=[10,11,39,40,48,49,51,52,53,54,55,56,59],$VP=[10,11,48,49],$VQ=[1,135],$VR=[1,136],$VS=[15,58,60],$VT=[7,13,18,20,21,22,24,25,27,28,30,32,33,34,35,36],$VU=[2,70],$VV=[2,69];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"init":3,"instrucciones":4,"EOF":5,"instruccion":6,"PRINTLN":7,"PARENTESISABRE":8,"operacionNumerica":9,"PARENTESISCIERRA":10,"PUNTOCOMA":11,"expresionLogica":12,"WHILE":13,"LLAVEABRE":14,"LLAVECIERRA":15,"TRUE":16,"FALSE":17,"SWITCH":18,"cases":19,"DO":20,"FOR":21,"IDENTIFICADOR":22,"IGUAL":23,"INCREMENTO":24,"DECREMENTO":25,"tipo_dato":26,"CONST":27,"BREAK":28,"instruccionIf":29,"IF":30,"ELSE":31,"INT":32,"DOUBLE":33,"CHAR":34,"BOOLEAN":35,"STRING":36,"asignacionOperacion":37,"CADENA":38,"MAS":39,"MENOS":40,"MODULO":41,"MULTIPLICADO":42,"POTENCIA":43,"DIVIDIDO":44,"ENTERO":45,"DECIMAL":46,"expresionRelacional":47,"AND":48,"OR":49,"NOT":50,"MAYOR":51,"MENOR":52,"MAYORIGUAL":53,"MENORIGUAL":54,"DOBLEIGUAL":55,"DIFERENTE":56,"case":57,"CASE":58,"DOSPUNTOS":59,"DEFAULT":60,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"PRINTLN",8:"PARENTESISABRE",10:"PARENTESISCIERRA",11:"PUNTOCOMA",13:"WHILE",14:"LLAVEABRE",15:"LLAVECIERRA",16:"TRUE",17:"FALSE",18:"SWITCH",20:"DO",21:"FOR",22:"IDENTIFICADOR",23:"IGUAL",24:"INCREMENTO",25:"DECREMENTO",27:"CONST",28:"BREAK",30:"IF",31:"ELSE",32:"INT",33:"DOUBLE",34:"CHAR",35:"BOOLEAN",36:"STRING",38:"CADENA",39:"MAS",40:"MENOS",41:"MODULO",42:"MULTIPLICADO",43:"POTENCIA",44:"DIVIDIDO",45:"ENTERO",46:"DECIMAL",48:"AND",49:"OR",50:"NOT",51:"MAYOR",52:"MENOR",53:"MAYORIGUAL",54:"MENORIGUAL",55:"DOBLEIGUAL",56:"DIFERENTE",58:"CASE",59:"DOSPUNTOS",60:"DEFAULT"},
productions_: [0,[3,2],[4,2],[4,1],[6,5],[6,5],[6,7],[6,7],[6,7],[6,7],[6,9],[6,9],[6,9],[6,14],[6,14],[6,15],[6,16],[6,15],[6,15],[6,5],[6,6],[6,4],[6,3],[6,3],[6,3],[6,3],[6,2],[6,1],[29,7],[29,11],[29,9],[26,1],[26,1],[26,1],[26,1],[26,1],[37,1],[37,1],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,2],[9,2],[9,2],[9,2],[9,3],[9,2],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[12,3],[12,3],[12,2],[12,1],[47,3],[47,3],[47,3],[47,3],[47,3],[47,3],[19,2],[19,1],[57,6],[57,5]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

                return $$[$0-1]
        
break;
case 2: case 67:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 3:
 this.$ = [$$[$0]] 
break;
case 4:
 this.$ = instrucciones.nuevoPrintln($$[$0-2]) 
break;
case 5:
 this.$ = instrucciones.nuevoPrintlnLogico($$[$0-2]) 
break;
case 6:
 this.$ = instrucciones.nuevoWhile($$[$0-4], $$[$0-1])
break;
case 7: case 8:
 this.$ = instrucciones.nuevoWhile(instrucciones.nuevoValor($$[$0-4], TIPO_VALOR.BOOLEAN), $$[$0-1])
break;
case 9:
 this.$ = instrucciones.nuevoSwitch($$[$0-4], $$[$0-1]) 
break;
case 10:
 this.$ = instrucciones.nuevoDoWhile($$[$0-6], $$[$0-2])
break;
case 11: case 12:
 this.$ = instrucciones.nuevoDoWhile($$[$0-6], instrucciones.nuevoValor($$[$0-2], TIPO_VALOR.BOOLEAN))
break;
case 13:
 this.$ = instrucciones.nuevoForAsignacionSimbolosMas($$[$0-11], $$[$0-9], $$[$0-7], $$[$0-5], $$[$0-1]) 
break;
case 14:
 this.$ = instrucciones.nuevoForAsignacionSimbolosMenos($$[$0-11], $$[$0-9], $$[$0-7], $$[$0-5], $$[$0-1]) 
break;
case 15:
 this.$ = instrucciones.nuevoForAsignacionOperacion($$[$0-12], $$[$0-10], $$[$0-8], $$[$0-6], $$[$0-4], $$[$0-1]) 
break;
case 16:
 this.$ = instrucciones.nuevoForDeclaracionOperacion($$[$0-13].toUpperCase(), $$[$0-12], $$[$0-10], $$[$0-8], $$[$0-6], $$[$0-4], $$[$0-1]) 
break;
case 17:
 this.$ = instrucciones.nuevoForDeclaracionSimbolosMas($$[$0-12].toUpperCase(), $$[$0-11], $$[$0-9], $$[$0-7], $$[$0-5], $$[$0-1]) 
break;
case 18:
 this.$ = instrucciones.nuevoForDeclaracionSimbolosMenos($$[$0-12].toUpperCase(), $$[$0-11], $$[$0-9], $$[$0-7], $$[$0-5], $$[$0-1]) 
break;
case 19:
 this.$ = instrucciones.nuevoDeclaracionAsignacion($$[$0-4].toUpperCase(), $$[$0-3], $$[$0-1], false)
break;
case 20:
 this.$ = instrucciones.nuevoDeclaracionAsignacion($$[$0-4].toUpperCase(), $$[$0-3], $$[$0-1], true)
break;
case 21:
 this.$ = instrucciones.nuevoAsignacion($$[$0-3], $$[$0-1])
break;
case 22:
 this.$ = instrucciones.nuevoPostIncremento($$[$0-2]) 
break;
case 23:
 this.$ = instrucciones.nuevoPostDecremento($$[$0-2]) 
break;
case 24:
 this.$ = instrucciones.nuevoPreIncremento($$[$0-1]) 
break;
case 25:
 this.$ = instrucciones.nuevoPreDecremento($$[$0-1]) 
break;
case 26:
 this.$ = instrucciones.nuevoBreak() 
break;
case 27: case 60:
 this.$ = $$[$0] 
break;
case 28:
 this.$ = instrucciones.nuevoIf($$[$0-4], $$[$0-1]) 
break;
case 29:
 this.$ = instrucciones.nuevoIfElse($$[$0-8], $$[$0-5], $$[$0-1]) 
break;
case 30:
 this.$ = instrucciones.nuevoIfElseIf($$[$0-6], $$[$0-3], $$[$0])
break;
case 31: case 32: case 33: case 34: case 35:
this.$ = $$[$0]
break;
case 36:
 this.$ = instrucciones.nuevoValor($$[$0], TIPO_VALOR.CADENA) 
break;
case 37:
 this.$ = $$[$0]; 
break;
case 38:
 this.$ = instrucciones.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.SUMA) 
break;
case 39:
 this.$ = instrucciones.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.RESTA) 
break;
case 40:
 this.$ = instrucciones.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MODULO) 
break;
case 41:
 this.$ = instrucciones.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MULTIPLICACION) 
break;
case 42:
 this.$ = instrucciones.nuevoOperacionBinaria($$[$0-2], $$[$01], TIPO_OPERACION.POTENCIA) 
break;
case 43:
 this.$ = instrucciones.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.DIVISION) 
break;
case 44:
 this.$ = instrucciones.nuevoOperacionUnaria($$[$0-1], TIPO_OPERACION.POST_INCREMENTO) 
break;
case 45:
 this.$ = instrucciones.nuevoOperacionUnaria($$[$0-1], TIPO_OPERACION.POST_DECREMENTO) 
break;
case 46:
 this.$ = instrucciones.nuevoOperacionUnaria($$[$0], TIPO_OPERACION.PRE_INCREMENTO) 
break;
case 47:
 this.$ = instrucciones.nuevoOperacionUnaria($$[$0], TIPO_OPERACION.PRE_DECREMENTO) 
break;
case 48:
 this.$ = $$[$0-1] 
break;
case 49:
 this.$ = instrucciones.nuevoOperacionUnaria($$[$0], TIPO_OPERACION.NEGATIVO) 
break;
case 50:
 this.$ = instrucciones.nuevoValor(Number($$[$0]), TIPO_VALOR.INT) 
break;
case 51:
 this.$ = instrucciones.nuevoValor(parseFloat($$[$0]), TIPO_VALOR.DOUBLE)
break;
case 52:
 this.$ = instrucciones.nuevoValor($$[$0].charAt(0), TIPO_VALOR.CHAR)
break;
case 53: case 54:
 this.$ = instrucciones.nuevoValor($$[$0], TIPO_VALOR.BOOLEAN)
break;
case 55:
 this.$ = instrucciones.nuevoValor($$[$0], TIPO_VALOR.IDENTIFICADOR)
break;
case 56:
 this.$ = instrucciones.nuevoValor($$[$0], TIPO_VALOR.CADENA)
break;
case 57:
 this.$ = instrucciones.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.AND)
break;
case 58:
 this.$ = instrucciones.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.OR)
break;
case 59:
 this.$ = instrucciones.nuevoOperacionUnaria($$[$0], TIPO_OPERACION.NOT)
break;
case 61:
 this.$ = instrucciones.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MAYOR) 
break;
case 62:
 this.$ = instrucciones.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MENOR) 
break;
case 63:
 this.$ = instrucciones.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MAYOR_IGUAL) 
break;
case 64:
 this.$ = instrucciones.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MENOR_IGUAL) 
break;
case 65:
 this.$ = instrucciones.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.DOBLE_IGUAL) 
break;
case 66:
 this.$ = instrucciones.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.DIFERENTE) 
break;
case 68:
 this.$ = instrucciones.nuevoListaCases($$[$0])
break;
case 69:
 this.$ = instrucciones.nuevoCase($$[$0-4], $$[$0-2]) 
break;
case 70:
 this.$ = instrucciones.nuevoCaseDefault($$[$0-2])
break;
}
},
table: [{3:1,4:2,6:3,7:$V0,13:$V1,18:$V2,20:$V3,21:$V4,22:$V5,24:$V6,25:$V7,26:9,27:$V8,28:$V9,29:15,30:$Va,32:$Vb,33:$Vc,34:$Vd,35:$Ve,36:$Vf},{1:[3]},{5:[1,22],6:23,7:$V0,13:$V1,18:$V2,20:$V3,21:$V4,22:$V5,24:$V6,25:$V7,26:9,27:$V8,28:$V9,29:15,30:$Va,32:$Vb,33:$Vc,34:$Vd,35:$Ve,36:$Vf},o($Vg,[2,3]),{8:[1,24]},{8:[1,25]},{8:[1,26]},{14:[1,27]},{8:[1,28]},{22:[1,29]},{26:30,32:$Vb,33:$Vc,34:$Vd,35:$Ve,36:$Vf},{23:[1,31],24:[1,32],25:[1,33]},{22:[1,34]},{22:[1,35]},{11:[1,36]},o($Vg,[2,27]),{22:[2,31]},{22:[2,32]},{22:[2,33]},{22:[2,34]},{22:[2,35]},{8:[1,37]},{1:[2,1]},o($Vg,[2,2]),{8:$Vh,9:38,12:39,16:$Vi,17:$Vj,22:$Vk,24:$Vl,25:$Vm,34:$Vn,38:$Vo,40:$Vp,45:$Vq,46:$Vr,47:51,50:$Vs},{8:$Vh,9:56,12:53,16:[1,54],17:[1,55],22:$Vk,24:$Vl,25:$Vm,34:$Vn,38:$Vo,40:$Vp,45:$Vq,46:$Vr,47:51,50:$Vs},{8:$Vh,9:57,16:$Vi,17:$Vj,22:$Vk,24:$Vl,25:$Vm,34:$Vn,38:$Vo,40:$Vp,45:$Vq,46:$Vr},{4:58,6:3,7:$V0,13:$V1,18:$V2,20:$V3,21:$V4,22:$V5,24:$V6,25:$V7,26:9,27:$V8,28:$V9,29:15,30:$Va,32:$Vb,33:$Vc,34:$Vd,35:$Ve,36:$Vf},{22:[1,59],26:60,32:$Vb,33:$Vc,34:$Vd,35:$Ve,36:$Vf},{23:[1,61]},{22:[1,62]},{8:$Vh,9:63,16:$Vi,17:$Vj,22:$Vk,24:$Vl,25:$Vm,34:$Vn,38:$Vo,40:$Vp,45:$Vq,46:$Vr},{11:[1,64]},{11:[1,65]},{11:[1,66]},{11:[1,67]},o($Vg,$Vt),{8:$Vh,9:56,12:68,16:$Vi,17:$Vj,22:$Vk,24:$Vl,25:$Vm,34:$Vn,38:$Vo,40:$Vp,45:$Vq,46:$Vr,47:51,50:$Vs},{10:[1,69],24:$Vu,25:$Vv,39:$Vw,40:$Vx,41:$Vy,42:$Vz,43:$VA,44:$VB,51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,56:$VH},{10:[1,84]},{8:$Vh,9:85,16:$Vi,17:$Vj,22:$Vk,24:$Vl,25:$Vm,34:$Vn,38:$Vo,40:$Vp,45:$Vq,46:$Vr},{8:$Vh,9:86,16:$Vi,17:$Vj,22:$Vk,24:$Vl,25:$Vm,34:$Vn,38:$Vo,40:$Vp,45:$Vq,46:$Vr},{8:$Vh,9:87,16:$Vi,17:$Vj,22:$Vk,24:$Vl,25:$Vm,34:$Vn,38:$Vo,40:$Vp,45:$Vq,46:$Vr},{8:$Vh,9:88,16:$Vi,17:$Vj,22:$Vk,24:$Vl,25:$Vm,34:$Vn,38:$Vo,40:$Vp,45:$Vq,46:$Vr},o($VI,[2,50]),o($VI,[2,51]),o($VI,[2,52]),o($VI,$VJ),o($VI,$VK),o($VI,[2,55]),o($VI,[2,56]),o($VL,[2,60],{48:[1,89],49:[1,90]}),{8:$Vh,9:56,16:$Vi,17:$Vj,22:$Vk,24:$Vl,25:$Vm,34:$Vn,38:$Vo,40:$Vp,45:$Vq,46:$Vr,47:91},{10:[1,92]},o($VM,$VJ,{10:[1,93]}),o($VM,$VK,{10:[1,94]}),{24:$Vu,25:$Vv,39:$Vw,40:$Vx,41:$Vy,42:$Vz,43:$VA,44:$VB,51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,56:$VH},{10:[1,95],24:$Vu,25:$Vv,39:$Vw,40:$Vx,41:$Vy,42:$Vz,43:$VA,44:$VB},{6:23,7:$V0,13:$V1,15:[1,96],18:$V2,20:$V3,21:$V4,22:$V5,24:$V6,25:$V7,26:9,27:$V8,28:$V9,29:15,30:$Va,32:$Vb,33:$Vc,34:$Vd,35:$Ve,36:$Vf},{23:[1,97]},{22:[1,98]},{8:$Vh,9:99,16:$Vi,17:$Vj,22:$Vk,24:$Vl,25:$Vm,34:$Vn,38:$Vo,40:$Vp,45:$Vq,46:$Vr},{23:[1,100]},{11:[1,101],24:$Vu,25:$Vv,39:$Vw,40:$Vx,41:$Vy,42:$Vz,43:$VA,44:$VB},o($Vg,[2,22]),o($Vg,[2,23]),o($Vg,[2,24]),o($Vg,[2,25]),{10:[1,102]},{11:[1,103]},{8:$Vh,9:104,16:$Vi,17:$Vj,22:$Vk,24:$Vl,25:$Vm,34:$Vn,38:$Vo,40:$Vp,45:$Vq,46:$Vr},{8:$Vh,9:105,16:$Vi,17:$Vj,22:$Vk,24:$Vl,25:$Vm,34:$Vn,38:$Vo,40:$Vp,45:$Vq,46:$Vr},{8:$Vh,9:106,16:$Vi,17:$Vj,22:$Vk,24:$Vl,25:$Vm,34:$Vn,38:$Vo,40:$Vp,45:$Vq,46:$Vr},{8:$Vh,9:107,16:$Vi,17:$Vj,22:$Vk,24:$Vl,25:$Vm,34:$Vn,38:$Vo,40:$Vp,45:$Vq,46:$Vr},{8:$Vh,9:108,16:$Vi,17:$Vj,22:$Vk,24:$Vl,25:$Vm,34:$Vn,38:$Vo,40:$Vp,45:$Vq,46:$Vr},{8:$Vh,9:109,16:$Vi,17:$Vj,22:$Vk,24:$Vl,25:$Vm,34:$Vn,38:$Vo,40:$Vp,45:$Vq,46:$Vr},o($VI,[2,44]),o($VI,[2,45]),{8:$Vh,9:110,16:$Vi,17:$Vj,22:$Vk,24:$Vl,25:$Vm,34:$Vn,38:$Vo,40:$Vp,45:$Vq,46:$Vr},{8:$Vh,9:111,16:$Vi,17:$Vj,22:$Vk,24:$Vl,25:$Vm,34:$Vn,38:$Vo,40:$Vp,45:$Vq,46:$Vr},{8:$Vh,9:112,16:$Vi,17:$Vj,22:$Vk,24:$Vl,25:$Vm,34:$Vn,38:$Vo,40:$Vp,45:$Vq,46:$Vr},{8:$Vh,9:113,16:$Vi,17:$Vj,22:$Vk,24:$Vl,25:$Vm,34:$Vn,38:$Vo,40:$Vp,45:$Vq,46:$Vr},{8:$Vh,9:114,16:$Vi,17:$Vj,22:$Vk,24:$Vl,25:$Vm,34:$Vn,38:$Vo,40:$Vp,45:$Vq,46:$Vr},{8:$Vh,9:115,16:$Vi,17:$Vj,22:$Vk,24:$Vl,25:$Vm,34:$Vn,38:$Vo,40:$Vp,45:$Vq,46:$Vr},{11:[1,116]},o($VI,[2,46]),o($VI,[2,47]),{10:[1,117],24:$Vu,25:$Vv,39:$Vw,40:$Vx,41:$Vy,42:$Vz,43:$VA,44:$VB},o($VN,[2,49],{24:$Vu,25:$Vv}),{8:$Vh,9:56,16:$Vi,17:$Vj,22:$Vk,24:$Vl,25:$Vm,34:$Vn,38:$Vo,40:$Vp,45:$Vq,46:$Vr,47:118},{8:$Vh,9:56,16:$Vi,17:$Vj,22:$Vk,24:$Vl,25:$Vm,34:$Vn,38:$Vo,40:$Vp,45:$Vq,46:$Vr,47:119},o($VL,[2,59]),{14:[1,120]},{14:[1,121]},{14:[1,122]},{14:[1,123]},{13:[1,124]},{8:$Vh,9:125,16:$Vi,17:$Vj,22:$Vk,24:$Vl,25:$Vm,34:$Vn,38:$Vo,40:$Vp,45:$Vq,46:$Vr},{23:[1,126]},{11:[1,127],24:$Vu,25:$Vv,39:$Vw,40:$Vx,41:$Vy,42:$Vz,43:$VA,44:$VB},{8:$Vh,9:128,16:$Vi,17:$Vj,22:$Vk,24:$Vl,25:$Vm,34:$Vn,38:$Vo,40:$Vp,45:$Vq,46:$Vr},o($Vg,[2,21]),{14:[1,129]},o($Vg,[2,4]),o($VO,[2,38],{24:$Vu,25:$Vv,41:$Vy,42:$Vz,43:$VA,44:$VB}),o($VO,[2,39],{24:$Vu,25:$Vv,41:$Vy,42:$Vz,43:$VA,44:$VB}),o($VN,[2,40],{24:$Vu,25:$Vv}),o($VN,[2,41],{24:$Vu,25:$Vv}),o($VN,[2,42],{24:$Vu,25:$Vv}),o($VN,[2,43],{24:$Vu,25:$Vv}),o($VP,[2,61],{24:$Vu,25:$Vv,39:$Vw,40:$Vx,41:$Vy,42:$Vz,43:$VA,44:$VB}),o($VP,[2,62],{24:$Vu,25:$Vv,39:$Vw,40:$Vx,41:$Vy,42:$Vz,43:$VA,44:$VB}),o($VP,[2,63],{24:$Vu,25:$Vv,39:$Vw,40:$Vx,41:$Vy,42:$Vz,43:$VA,44:$VB}),o($VP,[2,64],{24:$Vu,25:$Vv,39:$Vw,40:$Vx,41:$Vy,42:$Vz,43:$VA,44:$VB}),o($VP,[2,65],{24:$Vu,25:$Vv,39:$Vw,40:$Vx,41:$Vy,42:$Vz,43:$VA,44:$VB}),o($VP,[2,66],{24:$Vu,25:$Vv,39:$Vw,40:$Vx,41:$Vy,42:$Vz,43:$VA,44:$VB}),o($Vg,[2,5]),o($VI,[2,48]),o($VL,[2,57]),o($VL,[2,58]),{4:130,6:3,7:$V0,13:$V1,18:$V2,20:$V3,21:$V4,22:$V5,24:$V6,25:$V7,26:9,27:$V8,28:$V9,29:15,30:$Va,32:$Vb,33:$Vc,34:$Vd,35:$Ve,36:$Vf},{4:131,6:3,7:$V0,13:$V1,18:$V2,20:$V3,21:$V4,22:$V5,24:$V6,25:$V7,26:9,27:$V8,28:$V9,29:15,30:$Va,32:$Vb,33:$Vc,34:$Vd,35:$Ve,36:$Vf},{4:132,6:3,7:$V0,13:$V1,18:$V2,20:$V3,21:$V4,22:$V5,24:$V6,25:$V7,26:9,27:$V8,28:$V9,29:15,30:$Va,32:$Vb,33:$Vc,34:$Vd,35:$Ve,36:$Vf},{19:133,57:134,58:$VQ,60:$VR},{8:[1,137]},{11:[1,138],24:$Vu,25:$Vv,39:$Vw,40:$Vx,41:$Vy,42:$Vz,43:$VA,44:$VB},{8:$Vh,9:139,16:$Vi,17:$Vj,22:$Vk,24:$Vl,25:$Vm,34:$Vn,38:$Vo,40:$Vp,45:$Vq,46:$Vr},o($Vg,[2,19]),{11:[1,140],24:$Vu,25:$Vv,39:$Vw,40:$Vx,41:$Vy,42:$Vz,43:$VA,44:$VB},{4:141,6:3,7:$V0,13:$V1,18:$V2,20:$V3,21:$V4,22:$V5,24:$V6,25:$V7,26:9,27:$V8,28:$V9,29:15,30:$Va,32:$Vb,33:$Vc,34:$Vd,35:$Ve,36:$Vf},{6:23,7:$V0,13:$V1,15:[1,142],18:$V2,20:$V3,21:$V4,22:$V5,24:$V6,25:$V7,26:9,27:$V8,28:$V9,29:15,30:$Va,32:$Vb,33:$Vc,34:$Vd,35:$Ve,36:$Vf},{6:23,7:$V0,13:$V1,15:[1,143],18:$V2,20:$V3,21:$V4,22:$V5,24:$V6,25:$V7,26:9,27:$V8,28:$V9,29:15,30:$Va,32:$Vb,33:$Vc,34:$Vd,35:$Ve,36:$Vf},{6:23,7:$V0,13:$V1,15:[1,144],18:$V2,20:$V3,21:$V4,22:$V5,24:$V6,25:$V7,26:9,27:$V8,28:$V9,29:15,30:$Va,32:$Vb,33:$Vc,34:$Vd,35:$Ve,36:$Vf},{15:[1,145],57:146,58:$VQ,60:$VR},o($VS,[2,68]),{8:$Vh,9:147,16:$Vi,17:$Vj,22:$Vk,24:$Vl,25:$Vm,34:$Vn,38:$Vo,40:$Vp,45:$Vq,46:$Vr},{59:[1,148]},{8:$Vh,9:56,12:149,16:[1,150],17:[1,151],22:$Vk,24:$Vl,25:$Vm,34:$Vn,38:$Vo,40:$Vp,45:$Vq,46:$Vr,47:51,50:$Vs},{8:$Vh,9:56,12:152,16:$Vi,17:$Vj,22:$Vk,24:$Vl,25:$Vm,34:$Vn,38:$Vo,40:$Vp,45:$Vq,46:$Vr,47:51,50:$Vs},{11:[1,153],24:$Vu,25:$Vv,39:$Vw,40:$Vx,41:$Vy,42:$Vz,43:$VA,44:$VB},o($Vg,[2,20]),{6:23,7:$V0,13:$V1,15:[1,154],18:$V2,20:$V3,21:$V4,22:$V5,24:$V6,25:$V7,26:9,27:$V8,28:$V9,29:15,30:$Va,32:$Vb,33:$Vc,34:$Vd,35:$Ve,36:$Vf},o($Vg,[2,6]),o($Vg,[2,7]),o($Vg,[2,8]),o($Vg,[2,9]),o($VS,[2,67]),{24:$Vu,25:$Vv,39:$Vw,40:$Vx,41:$Vy,42:$Vz,43:$VA,44:$VB,59:[1,155]},{4:156,6:3,7:$V0,13:$V1,18:$V2,20:$V3,21:$V4,22:$V5,24:$V6,25:$V7,26:9,27:$V8,28:$V9,29:15,30:$Va,32:$Vb,33:$Vc,34:$Vd,35:$Ve,36:$Vf},{10:[1,157]},o($VM,$VJ,{10:[1,158]}),o($VM,$VK,{10:[1,159]}),{11:[1,160]},{8:$Vh,9:56,12:161,16:$Vi,17:$Vj,22:$Vk,24:$Vl,25:$Vm,34:$Vn,38:$Vo,40:$Vp,45:$Vq,46:$Vr,47:51,50:$Vs},o($Vg,[2,28],{31:[1,162]}),{4:163,6:3,7:$V0,13:$V1,18:$V2,20:$V3,21:$V4,22:$V5,24:$V6,25:$V7,26:9,27:$V8,28:$V9,29:15,30:$Va,32:$Vb,33:$Vc,34:$Vd,35:$Ve,36:$Vf},{6:23,7:$V0,13:$V1,18:$V2,20:$V3,21:$V4,22:$V5,24:$V6,25:$V7,26:9,27:$V8,28:[1,164],29:15,30:$Va,32:$Vb,33:$Vc,34:$Vd,35:$Ve,36:$Vf},{11:[1,165]},{11:[1,166]},{11:[1,167]},{22:[1,168]},{11:[1,169]},{14:[1,170],29:171,30:$Va},{6:23,7:$V0,13:$V1,18:$V2,20:$V3,21:$V4,22:$V5,24:$V6,25:$V7,26:9,27:$V8,28:[1,172],29:15,30:$Va,32:$Vb,33:$Vc,34:$Vd,35:$Ve,36:$Vf},{11:[1,173]},o($Vg,[2,10]),o($Vg,[2,11]),o($Vg,[2,12]),{23:[1,176],24:[1,174],25:[1,175]},{22:[1,177]},{4:178,6:3,7:$V0,13:$V1,18:$V2,20:$V3,21:$V4,22:$V5,24:$V6,25:$V7,26:9,27:$V8,28:$V9,29:15,30:$Va,32:$Vb,33:$Vc,34:$Vd,35:$Ve,36:$Vf},o($Vg,[2,30]),{11:[1,179]},o($VT,$Vt,{15:$VU,58:$VU,60:$VU}),{10:[1,180]},{10:[1,181]},{8:$Vh,9:182,16:$Vi,17:$Vj,22:$Vk,24:$Vl,25:$Vm,34:$Vn,38:$Vo,40:$Vp,45:$Vq,46:$Vr},{23:[1,183],24:[1,184],25:[1,185]},{6:23,7:$V0,13:$V1,15:[1,186],18:$V2,20:$V3,21:$V4,22:$V5,24:$V6,25:$V7,26:9,27:$V8,28:$V9,29:15,30:$Va,32:$Vb,33:$Vc,34:$Vd,35:$Ve,36:$Vf},o($VT,$Vt,{15:$VV,58:$VV,60:$VV}),{14:[1,187]},{14:[1,188]},{10:[1,189],24:$Vu,25:$Vv,39:$Vw,40:$Vx,41:$Vy,42:$Vz,43:$VA,44:$VB},{8:$Vh,9:190,16:$Vi,17:$Vj,22:$Vk,24:$Vl,25:$Vm,34:$Vn,38:$Vo,40:$Vp,45:$Vq,46:$Vr},{10:[1,191]},{10:[1,192]},o($Vg,[2,29]),{4:193,6:3,7:$V0,13:$V1,18:$V2,20:$V3,21:$V4,22:$V5,24:$V6,25:$V7,26:9,27:$V8,28:$V9,29:15,30:$Va,32:$Vb,33:$Vc,34:$Vd,35:$Ve,36:$Vf},{4:194,6:3,7:$V0,13:$V1,18:$V2,20:$V3,21:$V4,22:$V5,24:$V6,25:$V7,26:9,27:$V8,28:$V9,29:15,30:$Va,32:$Vb,33:$Vc,34:$Vd,35:$Ve,36:$Vf},{14:[1,195]},{10:[1,196],24:$Vu,25:$Vv,39:$Vw,40:$Vx,41:$Vy,42:$Vz,43:$VA,44:$VB},{14:[1,197]},{14:[1,198]},{6:23,7:$V0,13:$V1,15:[1,199],18:$V2,20:$V3,21:$V4,22:$V5,24:$V6,25:$V7,26:9,27:$V8,28:$V9,29:15,30:$Va,32:$Vb,33:$Vc,34:$Vd,35:$Ve,36:$Vf},{6:23,7:$V0,13:$V1,15:[1,200],18:$V2,20:$V3,21:$V4,22:$V5,24:$V6,25:$V7,26:9,27:$V8,28:$V9,29:15,30:$Va,32:$Vb,33:$Vc,34:$Vd,35:$Ve,36:$Vf},{4:201,6:3,7:$V0,13:$V1,18:$V2,20:$V3,21:$V4,22:$V5,24:$V6,25:$V7,26:9,27:$V8,28:$V9,29:15,30:$Va,32:$Vb,33:$Vc,34:$Vd,35:$Ve,36:$Vf},{14:[1,202]},{4:203,6:3,7:$V0,13:$V1,18:$V2,20:$V3,21:$V4,22:$V5,24:$V6,25:$V7,26:9,27:$V8,28:$V9,29:15,30:$Va,32:$Vb,33:$Vc,34:$Vd,35:$Ve,36:$Vf},{4:204,6:3,7:$V0,13:$V1,18:$V2,20:$V3,21:$V4,22:$V5,24:$V6,25:$V7,26:9,27:$V8,28:$V9,29:15,30:$Va,32:$Vb,33:$Vc,34:$Vd,35:$Ve,36:$Vf},o($Vg,[2,13]),o($Vg,[2,14]),{6:23,7:$V0,13:$V1,15:[1,205],18:$V2,20:$V3,21:$V4,22:$V5,24:$V6,25:$V7,26:9,27:$V8,28:$V9,29:15,30:$Va,32:$Vb,33:$Vc,34:$Vd,35:$Ve,36:$Vf},{4:206,6:3,7:$V0,13:$V1,18:$V2,20:$V3,21:$V4,22:$V5,24:$V6,25:$V7,26:9,27:$V8,28:$V9,29:15,30:$Va,32:$Vb,33:$Vc,34:$Vd,35:$Ve,36:$Vf},{6:23,7:$V0,13:$V1,15:[1,207],18:$V2,20:$V3,21:$V4,22:$V5,24:$V6,25:$V7,26:9,27:$V8,28:$V9,29:15,30:$Va,32:$Vb,33:$Vc,34:$Vd,35:$Ve,36:$Vf},{6:23,7:$V0,13:$V1,15:[1,208],18:$V2,20:$V3,21:$V4,22:$V5,24:$V6,25:$V7,26:9,27:$V8,28:$V9,29:15,30:$Va,32:$Vb,33:$Vc,34:$Vd,35:$Ve,36:$Vf},o($Vg,[2,15]),{6:23,7:$V0,13:$V1,15:[1,209],18:$V2,20:$V3,21:$V4,22:$V5,24:$V6,25:$V7,26:9,27:$V8,28:$V9,29:15,30:$Va,32:$Vb,33:$Vc,34:$Vd,35:$Ve,36:$Vf},o($Vg,[2,17]),o($Vg,[2,18]),o($Vg,[2,16])],
defaultActions: {16:[2,31],17:[2,32],18:[2,33],19:[2,34],20:[2,35],22:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

        const TIPO_OPERACION = require('./operaciones').TIPO_OPERACION
        const TIPO_VALOR = require('./operaciones').TIPO_VALOR
        const TIPO_DATO = require('./tablaSimbolos').TIPO_DATO
        const instrucciones = require('./operaciones').instrucciones
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// Multicomentario
break;
case 1:// Comentario
break;
case 2:return 32;
break;
case 3:return 33;
break;
case 4:return 34;
break;
case 5:return 35;
break;
case 6:return 36;
break;
case 7:return 30;
break;
case 8:return 31;
break;
case 9:return 18;
break;
case 10:return 58;
break;
case 11:return 60;
break;
case 12:return 28;
break;
case 13:return 21;
break;
case 14:return 13;
break;
case 15:return 20;
break;
case 16:return 'CONTINUE';
break;
case 17:return 'VOID';
break;
case 18:return 'RETURN';
break;
case 19:return 'CALL';
break;
case 20:return 'RETURN';
break;
case 21:return 7;
break;
case 22:return 'TYPEOF';
break;
case 23:return 16;
break;
case 24:return 17;
break;
case 25:return 'IMPORT';
break;
case 26:return 'MAIN';
break;
case 27:return 27;
break;
case 28:return 11;   
break;
case 29:return 'COMA';      
break;
case 30:return 59;  
break;
case 31:return 24;
break;
case 32:return 25; 
break;
case 33:return 53;        
break;
case 34:return 54;
break;
case 35:return 51;             
break;
case 36:return 52; 
break;
case 37:return 56;   
break;
case 38:return 55;   
break;
case 39:return 50;
break;
case 40:return 23;   
break;
case 41:return 49;           
break;
case 42:return 48;
break;
case 43:return 'XOR';
break;
case 44:return 39;
break;
case 45:return 40;  
break;
case 46:return 44;      
break;
case 47:return 42;
break;
case 48:return 43;
break;
case 49: return 41;
break;
case 50:return 8;
break;
case 51:return 10; 
break;
case 52:return 14;     
break;
case 53:return 15;
break;
case 54:
break;
case 55:
break;
case 56: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 38; 
break;
case 57:return 46; 
break;
case 58: return 45; 
break;
case 59: return 22; 
break;
case 60: yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 34
break;
case 61:return 5;
break;
case 62: 
        console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);     
    
break;
}
},
rules: [/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:\/\/.*)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:char\b)/i,/^(?:boolean\b)/i,/^(?:String\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?:for\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:continue\b)/i,/^(?:void\b)/i,/^(?:return\b)/i,/^(?:call\b)/i,/^(?:return\b)/i,/^(?:println\b)/i,/^(?:typeof\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:import\b)/i,/^(?:main\b)/i,/^(?:const\b)/i,/^(?:;)/i,/^(?:,)/i,/^(?::)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:!=)/i,/^(?:==)/i,/^(?:!)/i,/^(?:=)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:\^)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\/)/i,/^(?:\*)/i,/^(?:\*\*)/i,/^(?:%)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:"([^\\\"]|\\.)*")/i,/^(?:[0-9]+\.([0-9]+)?\b)/i,/^(?:[0-9]+\b)/i,/^(?:([a-zA-Z_])[a-zA-Z0-9_ñÑ]*)/i,/^(?:('(\\(["'\\bfnrt]|u[0-9A-Fa-f]{4})|[^\\'])'))/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}