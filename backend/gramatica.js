/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,19],$V1=[1,4],$V2=[1,5],$V3=[1,6],$V4=[1,7],$V5=[1,8],$V6=[1,9],$V7=[1,10],$V8=[1,13],$V9=[1,14],$Va=[1,15],$Vb=[1,12],$Vc=[1,16],$Vd=[1,17],$Ve=[1,25],$Vf=[1,20],$Vg=[1,21],$Vh=[1,22],$Vi=[1,23],$Vj=[1,24],$Vk=[2,5,7,8,9,15,16,19,21,22,23,25,26,28,29,30,32,34,35,36,37,38],$Vl=[1,52],$Vm=[1,58],$Vn=[1,59],$Vo=[1,60],$Vp=[1,50],$Vq=[1,51],$Vr=[1,57],$Vs=[1,61],$Vt=[1,54],$Vu=[1,53],$Vv=[1,55],$Vw=[1,56],$Vx=[1,63],$Vy=[2,29],$Vz=[1,89],$VA=[1,90],$VB=[1,83],$VC=[1,84],$VD=[1,85],$VE=[1,86],$VF=[1,87],$VG=[1,88],$VH=[1,91],$VI=[1,92],$VJ=[1,93],$VK=[1,94],$VL=[1,95],$VM=[1,96],$VN=[12,13,25,26,41,42,43,44,45,46,51,52,53,55,56,57,58,59,60,63],$VO=[2,60],$VP=[2,61],$VQ=[12,13],$VR=[25,26,41,42,43,44,45,46,55,56,57,58,59,60],$VS=[12,13,41,42,43,44,45,46,51,52,53,55,56,57,58,59,60,63],$VT=[12,13,41,42,51,52,53,55,56,57,58,59,60,63],$VU=[12,13,51,52,53],$VV=[1,157],$VW=[1,158],$VX=[8,62,64],$VY=[2,7,9,15,16,19,21,22,23,25,26,28,29,30,32,34,35,36,37,38],$VZ=[2,78],$V_=[2,77];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"init":3,"instrucciones":4,"EOF":5,"instruccion":6,"LLAVEABRE":7,"LLAVECIERRA":8,"PRINTLN":9,"PARENTESISABRE":10,"operacionNumerica":11,"PARENTESISCIERRA":12,"PUNTOCOMA":13,"expresionLogica":14,"PRINT":15,"WHILE":16,"TRUE":17,"FALSE":18,"SWITCH":19,"cases":20,"DO":21,"FOR":22,"IDENTIFICADOR":23,"IGUAL":24,"INCREMENTO":25,"DECREMENTO":26,"tipo_dato":27,"CONST":28,"BREAK":29,"CONTINUE":30,"instruccionIf":31,"IF":32,"ELSE":33,"INT":34,"DOUBLE":35,"CHAR":36,"BOOLEAN":37,"STRING":38,"asignacionOperacion":39,"CADENA":40,"MAS":41,"MENOS":42,"MODULO":43,"MULTIPLICADO":44,"POTENCIA":45,"DIVIDIDO":46,"TYPEOF":47,"ENTERO":48,"DECIMAL":49,"expresionRelacional":50,"AND":51,"OR":52,"XOR":53,"NOT":54,"MAYOR":55,"MENOR":56,"MAYORIGUAL":57,"MENORIGUAL":58,"DOBLEIGUAL":59,"DIFERENTE":60,"case":61,"CASE":62,"DOSPUNTOS":63,"DEFAULT":64,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"LLAVEABRE",8:"LLAVECIERRA",9:"PRINTLN",10:"PARENTESISABRE",12:"PARENTESISCIERRA",13:"PUNTOCOMA",15:"PRINT",16:"WHILE",17:"TRUE",18:"FALSE",19:"SWITCH",21:"DO",22:"FOR",23:"IDENTIFICADOR",24:"IGUAL",25:"INCREMENTO",26:"DECREMENTO",28:"CONST",29:"BREAK",30:"CONTINUE",32:"IF",33:"ELSE",34:"INT",35:"DOUBLE",36:"CHAR",37:"BOOLEAN",38:"STRING",40:"CADENA",41:"MAS",42:"MENOS",43:"MODULO",44:"MULTIPLICADO",45:"POTENCIA",46:"DIVIDIDO",47:"TYPEOF",48:"ENTERO",49:"DECIMAL",51:"AND",52:"OR",53:"XOR",54:"NOT",55:"MAYOR",56:"MENOR",57:"MAYORIGUAL",58:"MENORIGUAL",59:"DOBLEIGUAL",60:"DIFERENTE",62:"CASE",63:"DOSPUNTOS",64:"DEFAULT"},
productions_: [0,[3,2],[4,2],[4,1],[6,3],[6,5],[6,5],[6,5],[6,5],[6,7],[6,7],[6,7],[6,7],[6,9],[6,9],[6,9],[6,14],[6,14],[6,15],[6,16],[6,15],[6,15],[6,5],[6,6],[6,4],[6,3],[6,3],[6,3],[6,3],[6,2],[6,2],[6,1],[6,2],[6,2],[31,7],[31,11],[31,9],[27,1],[27,1],[27,1],[27,1],[27,1],[39,1],[39,1],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,2],[11,2],[11,2],[11,2],[11,3],[11,4],[11,2],[11,1],[11,1],[11,1],[11,1],[11,1],[11,1],[11,1],[14,3],[14,3],[14,3],[14,2],[14,1],[50,3],[50,3],[50,3],[50,3],[50,3],[50,3],[20,2],[20,1],[61,6],[61,5]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

                return $$[$0-1]
        
break;
case 2: case 75:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 3:
 this.$ = [$$[$0]] 
break;
case 4:
 this.$ = instrucciones.nuevoBloque($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 5:
 this.$ = instrucciones.nuevoPrintln($$[$0-2], _$[$0-4].first_line, _$[$0-4].first_column) 
break;
case 6:
 this.$ = instrucciones.nuevoPrintlnLogico($$[$0-2], _$[$0-4].first_line, _$[$0-4].first_column) 
break;
case 7:
 this.$ = instrucciones.nuevoPrint($$[$0-2], _$[$0-4].first_line, _$[$0-4].first_column) 
break;
case 8:
 this.$ = instrucciones.nuevoPrintLogico($$[$0-2], _$[$0-4].first_line, _$[$0-4].first_column) 
break;
case 9:
 this.$ = instrucciones.nuevoWhile($$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column)
break;
case 10: case 11:
 this.$ = instrucciones.nuevoWhile(instrucciones.nuevoValor($$[$0-4], TIPO_VALOR.BOOLEAN, _$[$0-6].first_line, _$[$0-6].first_column), $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column)
break;
case 12:
 this.$ = instrucciones.nuevoSwitch($$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column) 
break;
case 13:
 this.$ = instrucciones.nuevoDoWhile($$[$0-6], $$[$0-2], _$[$0-8].first_line, _$[$0-8].first_column)
break;
case 14: case 15:
 this.$ = instrucciones.nuevoDoWhile($$[$0-6], instrucciones.nuevoValor($$[$0-2], TIPO_VALOR.BOOLEAN, _$[$0-8].first_line, _$[$0-8].first_column), _$[$0-8].first_line, _$[$0-8].first_column)
break;
case 16:
 this.$ = instrucciones.nuevoForAsignacionSimbolosMas($$[$0-11], $$[$0-9], $$[$0-7], $$[$0-5], $$[$0-1], _$[$0-13].first_line, _$[$0-13].first_column) 
break;
case 17:
 this.$ = instrucciones.nuevoForAsignacionSimbolosMenos($$[$0-11], $$[$0-9], $$[$0-7], $$[$0-5], $$[$0-1], _$[$0-13].first_line, _$[$0-13].first_column) 
break;
case 18:
 this.$ = instrucciones.nuevoForAsignacionOperacion($$[$0-12], $$[$0-10], $$[$0-8], $$[$0-6], $$[$0-4], $$[$0-1], _$[$0-14].first_line, _$[$0-14].first_column) 
break;
case 19:
 this.$ = instrucciones.nuevoForDeclaracionOperacion($$[$0-13].toUpperCase(), $$[$0-12], $$[$0-10], $$[$0-8], $$[$0-6], $$[$0-4], $$[$0-1], _$[$0-15].first_line, _$[$0-15].first_column) 
break;
case 20:
 this.$ = instrucciones.nuevoForDeclaracionSimbolosMas($$[$0-12].toUpperCase(), $$[$0-11], $$[$0-9], $$[$0-7], $$[$0-5], $$[$0-1], _$[$0-14].first_line, _$[$0-14].first_column) 
break;
case 21:
 this.$ = instrucciones.nuevoForDeclaracionSimbolosMenos($$[$0-12].toUpperCase(), $$[$0-11], $$[$0-9], $$[$0-7], $$[$0-5], $$[$0-1], _$[$0-14].first_line, _$[$0-14].first_column) 
break;
case 22:
 this.$ = instrucciones.nuevoDeclaracionAsignacion($$[$0-4].toUpperCase(), $$[$0-3], $$[$0-1], false, _$[$0-4].first_line, _$[$0-4].first_column)
break;
case 23:
 this.$ = instrucciones.nuevoDeclaracionAsignacion($$[$0-4].toUpperCase(), $$[$0-3], $$[$0-1], true, _$[$0-5].first_line, _$[$0-5].first_column)
break;
case 24:
 this.$ = instrucciones.nuevoAsignacion($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column)
break;
case 25:
 this.$ = instrucciones.nuevoPostIncremento($$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 26:
 this.$ = instrucciones.nuevoPostDecremento($$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 27:
 this.$ = instrucciones.nuevoPreIncremento($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 28:
 this.$ = instrucciones.nuevoPreDecremento($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 29:
 this.$ = instrucciones.nuevoBreak(_$[$0-1].first_line, _$[$0-1].first_column) 
break;
case 30:
 this.$ = instrucciones.nuevoContinue(_$[$0-1].first_line, _$[$0-1].first_column) 
break;
case 31: case 68:
 this.$ = $$[$0] 
break;
case 32:
 
break;
case 33:
 console.log("ERROR SINTACTICO EN LINEA: " + (yylineno+1)); tablaErroresLexSin.add(TIPO_ERROR.SINTACTICO, $$[$0-1], _$[$0-1].first_line+1, _$[$0-1].first_column+1, 'ERROR SINTACTICO')
break;
case 34:
 this.$ = instrucciones.nuevoIf($$[$0-4], $$[$0-1]) 
break;
case 35:
 this.$ = instrucciones.nuevoIfElse($$[$0-8], $$[$0-5], $$[$0-1], _$[$0-10].first_line, _$[$0-10].first_column) 
break;
case 36:
 this.$ = instrucciones.nuevoIfElseIf($$[$0-6], $$[$0-3], $$[$0], _$[$0-8].first_line, _$[$0-8].first_column)
break;
case 37: case 38: case 39: case 40: case 41:
this.$ = $$[$0]
break;
case 42:
 this.$ = instrucciones.nuevoValor($$[$0], TIPO_VALOR.CADENA, _$[$0].first_line, _$[$0].first_column) 
break;
case 43:
 this.$ = $$[$0]; 
break;
case 44:
 this.$ = instrucciones.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.SUMA, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 45:
 this.$ = instrucciones.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.RESTA, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 46:
 this.$ = instrucciones.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MODULO, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 47:
 this.$ = instrucciones.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MULTIPLICACION, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 48:
 this.$ = instrucciones.nuevoOperacionBinaria($$[$0-2], $$[$01], TIPO_OPERACION.POTENCIA, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 49:
 this.$ = instrucciones.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.DIVISION, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 50:
 this.$ = instrucciones.nuevoOperacionUnaria($$[$0-1], TIPO_OPERACION.POST_INCREMENTO, _$[$0-1].first_line, _$[$0-1].first_column) 
break;
case 51:
 this.$ = instrucciones.nuevoOperacionUnaria($$[$0-1], TIPO_OPERACION.POST_DECREMENTO, _$[$0-1].first_line, _$[$0-1].first_column) 
break;
case 52:
 this.$ = instrucciones.nuevoOperacionUnaria($$[$0], TIPO_OPERACION.PRE_INCREMENTO, _$[$0-1].first_line, _$[$0-1].first_column) 
break;
case 53:
 this.$ = instrucciones.nuevoOperacionUnaria($$[$0], TIPO_OPERACION.PRE_DECREMENTO, _$[$0-1].first_line, _$[$0-1].first_column) 
break;
case 54:
 this.$ = $$[$0-1] 
break;
case 55:
 this.$ = instrucciones.nuevoOperacionUnaria($$[$0-1], TIPO_OPERACION.TYPEOF, _$[$0-3].first_line, _$[$0-3].first_column) 
break;
case 56:
 this.$ = instrucciones.nuevoOperacionUnaria($$[$0], TIPO_OPERACION.NEGATIVO, _$[$0-1].first_line, _$[$0-1].first_column) 
break;
case 57:
 this.$ = instrucciones.nuevoValor(Number($$[$0]), TIPO_VALOR.INT, _$[$0].first_line, _$[$0].first_column) 
break;
case 58:
 this.$ = instrucciones.nuevoValor(parseFloat($$[$0]), TIPO_VALOR.DOUBLE, _$[$0].first_line, _$[$0].first_column)
break;
case 59:
 this.$ = instrucciones.nuevoValor($$[$0].charAt(0), TIPO_VALOR.CHAR, _$[$0].first_line, _$[$0].first_column)
break;
case 60: case 61:
 this.$ = instrucciones.nuevoValor($$[$0], TIPO_VALOR.BOOLEAN, _$[$0].first_line, _$[$0].first_column)
break;
case 62:
 this.$ = instrucciones.nuevoValor($$[$0], TIPO_VALOR.IDENTIFICADOR, _$[$0].first_line, _$[$0].first_column)
break;
case 63:
 this.$ = instrucciones.nuevoValor($$[$0], TIPO_VALOR.CADENA, _$[$0].first_line, _$[$0].first_column)
break;
case 64:
 this.$ = instrucciones.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.AND, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 65:
 this.$ = instrucciones.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.OR, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 66:
 this.$ = instrucciones.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.XOR, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 67:
 this.$ = instrucciones.nuevoOperacionUnaria($$[$0], TIPO_OPERACION.NOT, _$[$0-1].first_line, _$[$0-1].first_column)
break;
case 69:
 this.$ = instrucciones.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MAYOR, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 70:
 this.$ = instrucciones.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MENOR, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 71:
 this.$ = instrucciones.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MAYOR_IGUAL, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 72:
 this.$ = instrucciones.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MENOR_IGUAL, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 73:
 this.$ = instrucciones.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.DOBLE_IGUAL, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 74:
 this.$ = instrucciones.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.DIFERENTE, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 76:
 this.$ = instrucciones.nuevoListaCases($$[$0])
break;
case 77:
 this.$ = instrucciones.nuevoCase($$[$0-4], $$[$0-2], _$[$0-5].first_line, _$[$0-5].first_column) 
break;
case 78:
 this.$ = instrucciones.nuevoCaseDefault($$[$0-2], _$[$0-4].first_line, _$[$0-4].first_column)
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:$V1,9:$V2,15:$V3,16:$V4,19:$V5,21:$V6,22:$V7,23:$V8,25:$V9,26:$Va,27:11,28:$Vb,29:$Vc,30:$Vd,31:18,32:$Ve,34:$Vf,35:$Vg,36:$Vh,37:$Vi,38:$Vj},{1:[3]},{2:$V0,5:[1,26],6:27,7:$V1,9:$V2,15:$V3,16:$V4,19:$V5,21:$V6,22:$V7,23:$V8,25:$V9,26:$Va,27:11,28:$Vb,29:$Vc,30:$Vd,31:18,32:$Ve,34:$Vf,35:$Vg,36:$Vh,37:$Vi,38:$Vj},o($Vk,[2,3]),{2:$V0,4:28,6:3,7:$V1,8:[1,29],9:$V2,15:$V3,16:$V4,19:$V5,21:$V6,22:$V7,23:$V8,25:$V9,26:$Va,27:11,28:$Vb,29:$Vc,30:$Vd,31:18,32:$Ve,34:$Vf,35:$Vg,36:$Vh,37:$Vi,38:$Vj},{10:[1,30]},{10:[1,31]},{10:[1,32]},{10:[1,33]},{7:[1,34]},{10:[1,35]},{23:[1,36]},{27:37,34:$Vf,35:$Vg,36:$Vh,37:$Vi,38:$Vj},{24:[1,38],25:[1,39],26:[1,40]},{23:[1,41]},{23:[1,42]},{13:[1,43]},{13:[1,44]},o($Vk,[2,31]),{13:[1,45]},{23:[2,37]},{23:[2,38]},{23:[2,39]},{23:[2,40]},{23:[2,41]},{10:[1,46]},{1:[2,1]},o($Vk,[2,2]),{2:$V0,6:27,7:$V1,8:[1,47],9:$V2,15:$V3,16:$V4,19:$V5,21:$V6,22:$V7,23:$V8,25:$V9,26:$Va,27:11,28:$Vb,29:$Vc,30:$Vd,31:18,32:$Ve,34:$Vf,35:$Vg,36:$Vh,37:$Vi,38:$Vj},o($Vk,[2,32]),{10:$Vl,11:48,14:49,17:$Vm,18:$Vn,23:$Vo,25:$Vp,26:$Vq,36:$Vr,40:$Vs,42:$Vt,47:$Vu,48:$Vv,49:$Vw,50:62,54:$Vx},{10:$Vl,11:64,14:65,17:$Vm,18:$Vn,23:$Vo,25:$Vp,26:$Vq,36:$Vr,40:$Vs,42:$Vt,47:$Vu,48:$Vv,49:$Vw,50:62,54:$Vx},{10:$Vl,11:69,14:66,17:[1,67],18:[1,68],23:$Vo,25:$Vp,26:$Vq,36:$Vr,40:$Vs,42:$Vt,47:$Vu,48:$Vv,49:$Vw,50:62,54:$Vx},{10:$Vl,11:70,17:$Vm,18:$Vn,23:$Vo,25:$Vp,26:$Vq,36:$Vr,40:$Vs,42:$Vt,47:$Vu,48:$Vv,49:$Vw},{2:$V0,4:71,6:3,7:$V1,9:$V2,15:$V3,16:$V4,19:$V5,21:$V6,22:$V7,23:$V8,25:$V9,26:$Va,27:11,28:$Vb,29:$Vc,30:$Vd,31:18,32:$Ve,34:$Vf,35:$Vg,36:$Vh,37:$Vi,38:$Vj},{23:[1,72],27:73,34:$Vf,35:$Vg,36:$Vh,37:$Vi,38:$Vj},{24:[1,74]},{23:[1,75]},{10:$Vl,11:76,17:$Vm,18:$Vn,23:$Vo,25:$Vp,26:$Vq,36:$Vr,40:$Vs,42:$Vt,47:$Vu,48:$Vv,49:$Vw},{13:[1,77]},{13:[1,78]},{13:[1,79]},{13:[1,80]},o($Vk,$Vy),o($Vk,[2,30]),o($Vk,[2,33]),{10:$Vl,11:69,14:81,17:$Vm,18:$Vn,23:$Vo,25:$Vp,26:$Vq,36:$Vr,40:$Vs,42:$Vt,47:$Vu,48:$Vv,49:$Vw,50:62,54:$Vx},o($Vk,[2,4]),{12:[1,82],25:$Vz,26:$VA,41:$VB,42:$VC,43:$VD,44:$VE,45:$VF,46:$VG,55:$VH,56:$VI,57:$VJ,58:$VK,59:$VL,60:$VM},{12:[1,97]},{10:$Vl,11:98,17:$Vm,18:$Vn,23:$Vo,25:$Vp,26:$Vq,36:$Vr,40:$Vs,42:$Vt,47:$Vu,48:$Vv,49:$Vw},{10:$Vl,11:99,17:$Vm,18:$Vn,23:$Vo,25:$Vp,26:$Vq,36:$Vr,40:$Vs,42:$Vt,47:$Vu,48:$Vv,49:$Vw},{10:$Vl,11:100,17:$Vm,18:$Vn,23:$Vo,25:$Vp,26:$Vq,36:$Vr,40:$Vs,42:$Vt,47:$Vu,48:$Vv,49:$Vw},{10:[1,101]},{10:$Vl,11:102,17:$Vm,18:$Vn,23:$Vo,25:$Vp,26:$Vq,36:$Vr,40:$Vs,42:$Vt,47:$Vu,48:$Vv,49:$Vw},o($VN,[2,57]),o($VN,[2,58]),o($VN,[2,59]),o($VN,$VO),o($VN,$VP),o($VN,[2,62]),o($VN,[2,63]),o($VQ,[2,68],{51:[1,103],52:[1,104],53:[1,105]}),{10:$Vl,11:69,17:$Vm,18:$Vn,23:$Vo,25:$Vp,26:$Vq,36:$Vr,40:$Vs,42:$Vt,47:$Vu,48:$Vv,49:$Vw,50:106},{12:[1,107],25:$Vz,26:$VA,41:$VB,42:$VC,43:$VD,44:$VE,45:$VF,46:$VG,55:$VH,56:$VI,57:$VJ,58:$VK,59:$VL,60:$VM},{12:[1,108]},{12:[1,109]},o($VR,$VO,{12:[1,110]}),o($VR,$VP,{12:[1,111]}),{25:$Vz,26:$VA,41:$VB,42:$VC,43:$VD,44:$VE,45:$VF,46:$VG,55:$VH,56:$VI,57:$VJ,58:$VK,59:$VL,60:$VM},{12:[1,112],25:$Vz,26:$VA,41:$VB,42:$VC,43:$VD,44:$VE,45:$VF,46:$VG},{2:$V0,6:27,7:$V1,8:[1,113],9:$V2,15:$V3,16:$V4,19:$V5,21:$V6,22:$V7,23:$V8,25:$V9,26:$Va,27:11,28:$Vb,29:$Vc,30:$Vd,31:18,32:$Ve,34:$Vf,35:$Vg,36:$Vh,37:$Vi,38:$Vj},{24:[1,114]},{23:[1,115]},{10:$Vl,11:116,17:$Vm,18:$Vn,23:$Vo,25:$Vp,26:$Vq,36:$Vr,40:$Vs,42:$Vt,47:$Vu,48:$Vv,49:$Vw},{24:[1,117]},{13:[1,118],25:$Vz,26:$VA,41:$VB,42:$VC,43:$VD,44:$VE,45:$VF,46:$VG},o($Vk,[2,25]),o($Vk,[2,26]),o($Vk,[2,27]),o($Vk,[2,28]),{12:[1,119]},{13:[1,120]},{10:$Vl,11:121,17:$Vm,18:$Vn,23:$Vo,25:$Vp,26:$Vq,36:$Vr,40:$Vs,42:$Vt,47:$Vu,48:$Vv,49:$Vw},{10:$Vl,11:122,17:$Vm,18:$Vn,23:$Vo,25:$Vp,26:$Vq,36:$Vr,40:$Vs,42:$Vt,47:$Vu,48:$Vv,49:$Vw},{10:$Vl,11:123,17:$Vm,18:$Vn,23:$Vo,25:$Vp,26:$Vq,36:$Vr,40:$Vs,42:$Vt,47:$Vu,48:$Vv,49:$Vw},{10:$Vl,11:124,17:$Vm,18:$Vn,23:$Vo,25:$Vp,26:$Vq,36:$Vr,40:$Vs,42:$Vt,47:$Vu,48:$Vv,49:$Vw},{10:$Vl,11:125,17:$Vm,18:$Vn,23:$Vo,25:$Vp,26:$Vq,36:$Vr,40:$Vs,42:$Vt,47:$Vu,48:$Vv,49:$Vw},{10:$Vl,11:126,17:$Vm,18:$Vn,23:$Vo,25:$Vp,26:$Vq,36:$Vr,40:$Vs,42:$Vt,47:$Vu,48:$Vv,49:$Vw},o($VN,[2,50]),o($VN,[2,51]),{10:$Vl,11:127,17:$Vm,18:$Vn,23:$Vo,25:$Vp,26:$Vq,36:$Vr,40:$Vs,42:$Vt,47:$Vu,48:$Vv,49:$Vw},{10:$Vl,11:128,17:$Vm,18:$Vn,23:$Vo,25:$Vp,26:$Vq,36:$Vr,40:$Vs,42:$Vt,47:$Vu,48:$Vv,49:$Vw},{10:$Vl,11:129,17:$Vm,18:$Vn,23:$Vo,25:$Vp,26:$Vq,36:$Vr,40:$Vs,42:$Vt,47:$Vu,48:$Vv,49:$Vw},{10:$Vl,11:130,17:$Vm,18:$Vn,23:$Vo,25:$Vp,26:$Vq,36:$Vr,40:$Vs,42:$Vt,47:$Vu,48:$Vv,49:$Vw},{10:$Vl,11:131,17:$Vm,18:$Vn,23:$Vo,25:$Vp,26:$Vq,36:$Vr,40:$Vs,42:$Vt,47:$Vu,48:$Vv,49:$Vw},{10:$Vl,11:132,17:$Vm,18:$Vn,23:$Vo,25:$Vp,26:$Vq,36:$Vr,40:$Vs,42:$Vt,47:$Vu,48:$Vv,49:$Vw},{13:[1,133]},o($VN,[2,52]),o($VN,[2,53]),{12:[1,134],25:$Vz,26:$VA,41:$VB,42:$VC,43:$VD,44:$VE,45:$VF,46:$VG},{10:$Vl,11:135,17:$Vm,18:$Vn,23:$Vo,25:$Vp,26:$Vq,36:$Vr,40:$Vs,42:$Vt,47:$Vu,48:$Vv,49:$Vw},o($VS,[2,56],{25:$Vz,26:$VA}),{10:$Vl,11:69,17:$Vm,18:$Vn,23:$Vo,25:$Vp,26:$Vq,36:$Vr,40:$Vs,42:$Vt,47:$Vu,48:$Vv,49:$Vw,50:136},{10:$Vl,11:69,17:$Vm,18:$Vn,23:$Vo,25:$Vp,26:$Vq,36:$Vr,40:$Vs,42:$Vt,47:$Vu,48:$Vv,49:$Vw,50:137},{10:$Vl,11:69,17:$Vm,18:$Vn,23:$Vo,25:$Vp,26:$Vq,36:$Vr,40:$Vs,42:$Vt,47:$Vu,48:$Vv,49:$Vw,50:138},o($VQ,[2,67]),{13:[1,139]},{13:[1,140]},{7:[1,141]},{7:[1,142]},{7:[1,143]},{7:[1,144]},{16:[1,145]},{10:$Vl,11:146,17:$Vm,18:$Vn,23:$Vo,25:$Vp,26:$Vq,36:$Vr,40:$Vs,42:$Vt,47:$Vu,48:$Vv,49:$Vw},{24:[1,147]},{13:[1,148],25:$Vz,26:$VA,41:$VB,42:$VC,43:$VD,44:$VE,45:$VF,46:$VG},{10:$Vl,11:149,17:$Vm,18:$Vn,23:$Vo,25:$Vp,26:$Vq,36:$Vr,40:$Vs,42:$Vt,47:$Vu,48:$Vv,49:$Vw},o($Vk,[2,24]),{7:[1,150]},o($Vk,[2,5]),o($VT,[2,44],{25:$Vz,26:$VA,43:$VD,44:$VE,45:$VF,46:$VG}),o($VT,[2,45],{25:$Vz,26:$VA,43:$VD,44:$VE,45:$VF,46:$VG}),o($VS,[2,46],{25:$Vz,26:$VA}),o($VS,[2,47],{25:$Vz,26:$VA}),o($VS,[2,48],{25:$Vz,26:$VA}),o($VS,[2,49],{25:$Vz,26:$VA}),o($VU,[2,69],{25:$Vz,26:$VA,41:$VB,42:$VC,43:$VD,44:$VE,45:$VF,46:$VG}),o($VU,[2,70],{25:$Vz,26:$VA,41:$VB,42:$VC,43:$VD,44:$VE,45:$VF,46:$VG}),o($VU,[2,71],{25:$Vz,26:$VA,41:$VB,42:$VC,43:$VD,44:$VE,45:$VF,46:$VG}),o($VU,[2,72],{25:$Vz,26:$VA,41:$VB,42:$VC,43:$VD,44:$VE,45:$VF,46:$VG}),o($VU,[2,73],{25:$Vz,26:$VA,41:$VB,42:$VC,43:$VD,44:$VE,45:$VF,46:$VG}),o($VU,[2,74],{25:$Vz,26:$VA,41:$VB,42:$VC,43:$VD,44:$VE,45:$VF,46:$VG}),o($Vk,[2,6]),o($VN,[2,54]),{12:[1,151],25:$Vz,26:$VA,41:$VB,42:$VC,43:$VD,44:$VE,45:$VF,46:$VG},o($VQ,[2,64]),o($VQ,[2,65]),o($VQ,[2,66]),o($Vk,[2,7]),o($Vk,[2,8]),{2:$V0,4:152,6:3,7:$V1,9:$V2,15:$V3,16:$V4,19:$V5,21:$V6,22:$V7,23:$V8,25:$V9,26:$Va,27:11,28:$Vb,29:$Vc,30:$Vd,31:18,32:$Ve,34:$Vf,35:$Vg,36:$Vh,37:$Vi,38:$Vj},{2:$V0,4:153,6:3,7:$V1,9:$V2,15:$V3,16:$V4,19:$V5,21:$V6,22:$V7,23:$V8,25:$V9,26:$Va,27:11,28:$Vb,29:$Vc,30:$Vd,31:18,32:$Ve,34:$Vf,35:$Vg,36:$Vh,37:$Vi,38:$Vj},{2:$V0,4:154,6:3,7:$V1,9:$V2,15:$V3,16:$V4,19:$V5,21:$V6,22:$V7,23:$V8,25:$V9,26:$Va,27:11,28:$Vb,29:$Vc,30:$Vd,31:18,32:$Ve,34:$Vf,35:$Vg,36:$Vh,37:$Vi,38:$Vj},{20:155,61:156,62:$VV,64:$VW},{10:[1,159]},{13:[1,160],25:$Vz,26:$VA,41:$VB,42:$VC,43:$VD,44:$VE,45:$VF,46:$VG},{10:$Vl,11:161,17:$Vm,18:$Vn,23:$Vo,25:$Vp,26:$Vq,36:$Vr,40:$Vs,42:$Vt,47:$Vu,48:$Vv,49:$Vw},o($Vk,[2,22]),{13:[1,162],25:$Vz,26:$VA,41:$VB,42:$VC,43:$VD,44:$VE,45:$VF,46:$VG},{2:$V0,4:163,6:3,7:$V1,9:$V2,15:$V3,16:$V4,19:$V5,21:$V6,22:$V7,23:$V8,25:$V9,26:$Va,27:11,28:$Vb,29:$Vc,30:$Vd,31:18,32:$Ve,34:$Vf,35:$Vg,36:$Vh,37:$Vi,38:$Vj},o($VN,[2,55]),{2:$V0,6:27,7:$V1,8:[1,164],9:$V2,15:$V3,16:$V4,19:$V5,21:$V6,22:$V7,23:$V8,25:$V9,26:$Va,27:11,28:$Vb,29:$Vc,30:$Vd,31:18,32:$Ve,34:$Vf,35:$Vg,36:$Vh,37:$Vi,38:$Vj},{2:$V0,6:27,7:$V1,8:[1,165],9:$V2,15:$V3,16:$V4,19:$V5,21:$V6,22:$V7,23:$V8,25:$V9,26:$Va,27:11,28:$Vb,29:$Vc,30:$Vd,31:18,32:$Ve,34:$Vf,35:$Vg,36:$Vh,37:$Vi,38:$Vj},{2:$V0,6:27,7:$V1,8:[1,166],9:$V2,15:$V3,16:$V4,19:$V5,21:$V6,22:$V7,23:$V8,25:$V9,26:$Va,27:11,28:$Vb,29:$Vc,30:$Vd,31:18,32:$Ve,34:$Vf,35:$Vg,36:$Vh,37:$Vi,38:$Vj},{8:[1,167],61:168,62:$VV,64:$VW},o($VX,[2,76]),{10:$Vl,11:169,17:$Vm,18:$Vn,23:$Vo,25:$Vp,26:$Vq,36:$Vr,40:$Vs,42:$Vt,47:$Vu,48:$Vv,49:$Vw},{63:[1,170]},{10:$Vl,11:69,14:171,17:[1,172],18:[1,173],23:$Vo,25:$Vp,26:$Vq,36:$Vr,40:$Vs,42:$Vt,47:$Vu,48:$Vv,49:$Vw,50:62,54:$Vx},{10:$Vl,11:69,14:174,17:$Vm,18:$Vn,23:$Vo,25:$Vp,26:$Vq,36:$Vr,40:$Vs,42:$Vt,47:$Vu,48:$Vv,49:$Vw,50:62,54:$Vx},{13:[1,175],25:$Vz,26:$VA,41:$VB,42:$VC,43:$VD,44:$VE,45:$VF,46:$VG},o($Vk,[2,23]),{2:$V0,6:27,7:$V1,8:[1,176],9:$V2,15:$V3,16:$V4,19:$V5,21:$V6,22:$V7,23:$V8,25:$V9,26:$Va,27:11,28:$Vb,29:$Vc,30:$Vd,31:18,32:$Ve,34:$Vf,35:$Vg,36:$Vh,37:$Vi,38:$Vj},o($Vk,[2,9]),o($Vk,[2,10]),o($Vk,[2,11]),o($Vk,[2,12]),o($VX,[2,75]),{25:$Vz,26:$VA,41:$VB,42:$VC,43:$VD,44:$VE,45:$VF,46:$VG,63:[1,177]},{2:$V0,4:178,6:3,7:$V1,9:$V2,15:$V3,16:$V4,19:$V5,21:$V6,22:$V7,23:$V8,25:$V9,26:$Va,27:11,28:$Vb,29:$Vc,30:$Vd,31:18,32:$Ve,34:$Vf,35:$Vg,36:$Vh,37:$Vi,38:$Vj},{12:[1,179]},o($VR,$VO,{12:[1,180]}),o($VR,$VP,{12:[1,181]}),{13:[1,182]},{10:$Vl,11:69,14:183,17:$Vm,18:$Vn,23:$Vo,25:$Vp,26:$Vq,36:$Vr,40:$Vs,42:$Vt,47:$Vu,48:$Vv,49:$Vw,50:62,54:$Vx},o($Vk,[2,34],{33:[1,184]}),{2:$V0,4:185,6:3,7:$V1,9:$V2,15:$V3,16:$V4,19:$V5,21:$V6,22:$V7,23:$V8,25:$V9,26:$Va,27:11,28:$Vb,29:$Vc,30:$Vd,31:18,32:$Ve,34:$Vf,35:$Vg,36:$Vh,37:$Vi,38:$Vj},{2:$V0,6:27,7:$V1,9:$V2,15:$V3,16:$V4,19:$V5,21:$V6,22:$V7,23:$V8,25:$V9,26:$Va,27:11,28:$Vb,29:[1,186],30:$Vd,31:18,32:$Ve,34:$Vf,35:$Vg,36:$Vh,37:$Vi,38:$Vj},{13:[1,187]},{13:[1,188]},{13:[1,189]},{23:[1,190]},{13:[1,191]},{7:[1,192],31:193,32:$Ve},{2:$V0,6:27,7:$V1,9:$V2,15:$V3,16:$V4,19:$V5,21:$V6,22:$V7,23:$V8,25:$V9,26:$Va,27:11,28:$Vb,29:[1,194],30:$Vd,31:18,32:$Ve,34:$Vf,35:$Vg,36:$Vh,37:$Vi,38:$Vj},{13:[1,195]},o($Vk,[2,13]),o($Vk,[2,14]),o($Vk,[2,15]),{24:[1,198],25:[1,196],26:[1,197]},{23:[1,199]},{2:$V0,4:200,6:3,7:$V1,9:$V2,15:$V3,16:$V4,19:$V5,21:$V6,22:$V7,23:$V8,25:$V9,26:$Va,27:11,28:$Vb,29:$Vc,30:$Vd,31:18,32:$Ve,34:$Vf,35:$Vg,36:$Vh,37:$Vi,38:$Vj},o($Vk,[2,36]),{13:[1,201]},o($VY,$Vy,{8:$VZ,62:$VZ,64:$VZ}),{12:[1,202]},{12:[1,203]},{10:$Vl,11:204,17:$Vm,18:$Vn,23:$Vo,25:$Vp,26:$Vq,36:$Vr,40:$Vs,42:$Vt,47:$Vu,48:$Vv,49:$Vw},{24:[1,205],25:[1,206],26:[1,207]},{2:$V0,6:27,7:$V1,8:[1,208],9:$V2,15:$V3,16:$V4,19:$V5,21:$V6,22:$V7,23:$V8,25:$V9,26:$Va,27:11,28:$Vb,29:$Vc,30:$Vd,31:18,32:$Ve,34:$Vf,35:$Vg,36:$Vh,37:$Vi,38:$Vj},o($VY,$Vy,{8:$V_,62:$V_,64:$V_}),{7:[1,209]},{7:[1,210]},{12:[1,211],25:$Vz,26:$VA,41:$VB,42:$VC,43:$VD,44:$VE,45:$VF,46:$VG},{10:$Vl,11:212,17:$Vm,18:$Vn,23:$Vo,25:$Vp,26:$Vq,36:$Vr,40:$Vs,42:$Vt,47:$Vu,48:$Vv,49:$Vw},{12:[1,213]},{12:[1,214]},o($Vk,[2,35]),{2:$V0,4:215,6:3,7:$V1,9:$V2,15:$V3,16:$V4,19:$V5,21:$V6,22:$V7,23:$V8,25:$V9,26:$Va,27:11,28:$Vb,29:$Vc,30:$Vd,31:18,32:$Ve,34:$Vf,35:$Vg,36:$Vh,37:$Vi,38:$Vj},{2:$V0,4:216,6:3,7:$V1,9:$V2,15:$V3,16:$V4,19:$V5,21:$V6,22:$V7,23:$V8,25:$V9,26:$Va,27:11,28:$Vb,29:$Vc,30:$Vd,31:18,32:$Ve,34:$Vf,35:$Vg,36:$Vh,37:$Vi,38:$Vj},{7:[1,217]},{12:[1,218],25:$Vz,26:$VA,41:$VB,42:$VC,43:$VD,44:$VE,45:$VF,46:$VG},{7:[1,219]},{7:[1,220]},{2:$V0,6:27,7:$V1,8:[1,221],9:$V2,15:$V3,16:$V4,19:$V5,21:$V6,22:$V7,23:$V8,25:$V9,26:$Va,27:11,28:$Vb,29:$Vc,30:$Vd,31:18,32:$Ve,34:$Vf,35:$Vg,36:$Vh,37:$Vi,38:$Vj},{2:$V0,6:27,7:$V1,8:[1,222],9:$V2,15:$V3,16:$V4,19:$V5,21:$V6,22:$V7,23:$V8,25:$V9,26:$Va,27:11,28:$Vb,29:$Vc,30:$Vd,31:18,32:$Ve,34:$Vf,35:$Vg,36:$Vh,37:$Vi,38:$Vj},{2:$V0,4:223,6:3,7:$V1,9:$V2,15:$V3,16:$V4,19:$V5,21:$V6,22:$V7,23:$V8,25:$V9,26:$Va,27:11,28:$Vb,29:$Vc,30:$Vd,31:18,32:$Ve,34:$Vf,35:$Vg,36:$Vh,37:$Vi,38:$Vj},{7:[1,224]},{2:$V0,4:225,6:3,7:$V1,9:$V2,15:$V3,16:$V4,19:$V5,21:$V6,22:$V7,23:$V8,25:$V9,26:$Va,27:11,28:$Vb,29:$Vc,30:$Vd,31:18,32:$Ve,34:$Vf,35:$Vg,36:$Vh,37:$Vi,38:$Vj},{2:$V0,4:226,6:3,7:$V1,9:$V2,15:$V3,16:$V4,19:$V5,21:$V6,22:$V7,23:$V8,25:$V9,26:$Va,27:11,28:$Vb,29:$Vc,30:$Vd,31:18,32:$Ve,34:$Vf,35:$Vg,36:$Vh,37:$Vi,38:$Vj},o($Vk,[2,16]),o($Vk,[2,17]),{2:$V0,6:27,7:$V1,8:[1,227],9:$V2,15:$V3,16:$V4,19:$V5,21:$V6,22:$V7,23:$V8,25:$V9,26:$Va,27:11,28:$Vb,29:$Vc,30:$Vd,31:18,32:$Ve,34:$Vf,35:$Vg,36:$Vh,37:$Vi,38:$Vj},{2:$V0,4:228,6:3,7:$V1,9:$V2,15:$V3,16:$V4,19:$V5,21:$V6,22:$V7,23:$V8,25:$V9,26:$Va,27:11,28:$Vb,29:$Vc,30:$Vd,31:18,32:$Ve,34:$Vf,35:$Vg,36:$Vh,37:$Vi,38:$Vj},{2:$V0,6:27,7:$V1,8:[1,229],9:$V2,15:$V3,16:$V4,19:$V5,21:$V6,22:$V7,23:$V8,25:$V9,26:$Va,27:11,28:$Vb,29:$Vc,30:$Vd,31:18,32:$Ve,34:$Vf,35:$Vg,36:$Vh,37:$Vi,38:$Vj},{2:$V0,6:27,7:$V1,8:[1,230],9:$V2,15:$V3,16:$V4,19:$V5,21:$V6,22:$V7,23:$V8,25:$V9,26:$Va,27:11,28:$Vb,29:$Vc,30:$Vd,31:18,32:$Ve,34:$Vf,35:$Vg,36:$Vh,37:$Vi,38:$Vj},o($Vk,[2,18]),{2:$V0,6:27,7:$V1,8:[1,231],9:$V2,15:$V3,16:$V4,19:$V5,21:$V6,22:$V7,23:$V8,25:$V9,26:$Va,27:11,28:$Vb,29:$Vc,30:$Vd,31:18,32:$Ve,34:$Vf,35:$Vg,36:$Vh,37:$Vi,38:$Vj},o($Vk,[2,20]),o($Vk,[2,21]),o($Vk,[2,19])],
defaultActions: {20:[2,37],21:[2,38],22:[2,39],23:[2,40],24:[2,41],26:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};
  
        const TIPO_OPERACION = require('./operaciones').TIPO_OPERACION
        const TIPO_VALOR = require('./operaciones').TIPO_VALOR
        const TIPO_DATO = require('./tablaSimbolos').TIPO_DATO
        const instrucciones = require('./operaciones').instrucciones
        const {TIPO_ERROR, TablaErrores} = require('./tablaErrores')
        const tablaErroresLexSin = new TablaErrores([])
        module.exports.tablaErroresLexSin = tablaErroresLexSin
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:// Multicomentario
break;
case 2:// Comentario
break;
case 3:return 34;
break;
case 4:return 35;
break;
case 5:return 36;
break;
case 6:return 37;
break;
case 7:return 38;
break;
case 8:return 32;
break;
case 9:return 33;
break;
case 10:return 19;
break;
case 11:return 62;
break;
case 12:return 64;
break;
case 13:return 29;
break;
case 14:return 22;
break;
case 15:return 16;
break;
case 16:return 21;
break;
case 17:return 30;
break;
case 18:return 'VOID';
break;
case 19:return 'RETURN';
break;
case 20:return 'CALL';
break;
case 21:return 'RETURN';
break;
case 22:return 9;
break;
case 23:return 15;
break;
case 24:return 47;
break;
case 25:return 17;
break;
case 26:return 18;
break;
case 27:return 'IMPORT';
break;
case 28:return 'MAIN';
break;
case 29:return 28;
break;
case 30:return 13;   
break;
case 31:return 'COMA';      
break;
case 32:return 63;  
break;
case 33:return 25;
break;
case 34:return 26; 
break;
case 35:return 57;        
break;
case 36:return 58;
break;
case 37:return 55;             
break;
case 38:return 56; 
break;
case 39:return 60;   
break;
case 40:return 59;   
break;
case 41:return 54;
break;
case 42:return 24;   
break;
case 43:return 52;           
break;
case 44:return 51;
break;
case 45:return 53;
break;
case 46:return 41;
break;
case 47:return 42;  
break;
case 48:return 46;      
break;
case 49:return 44;
break;
case 50:return 45;
break;
case 51: return 43;
break;
case 52:return 10;
break;
case 53:return 12; 
break;
case 54:return 7;     
break;
case 55:return 8;
break;
case 56:
break;
case 57:
break;
case 58: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 40; 
break;
case 59:return 49; 
break;
case 60: return 48; 
break;
case 61: return 23; 
break;
case 62: yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 36
break;
case 63:return 5;
break;
case 64: 
        tablaErroresLexSin.add(TIPO_ERROR.LEXICO, yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column, 'ERROR LEXICO')
        console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);

    
break;
}
},
rules: [/^(?:\s+)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:\/\/.*)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:char\b)/i,/^(?:boolean\b)/i,/^(?:String\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?:for\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:continue\b)/i,/^(?:void\b)/i,/^(?:return\b)/i,/^(?:call\b)/i,/^(?:return\b)/i,/^(?:println\b)/i,/^(?:print\b)/i,/^(?:typeof\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:import\b)/i,/^(?:main\b)/i,/^(?:const\b)/i,/^(?:;)/i,/^(?:,)/i,/^(?::)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:!=)/i,/^(?:==)/i,/^(?:!)/i,/^(?:=)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:\^)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\/)/i,/^(?:\*)/i,/^(?:\*\*)/i,/^(?:%)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:"([^\\\"]|\\.)*")/i,/^(?:[0-9]+\.([0-9]+)?\b)/i,/^(?:[0-9]+\b)/i,/^(?:([a-zA-Z_])[a-zA-Z0-9_ñÑ]*)/i,/^(?:\\[^\\'])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"cadena":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64],"inclusive":true},"caracter":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64],"inclusive":true},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}